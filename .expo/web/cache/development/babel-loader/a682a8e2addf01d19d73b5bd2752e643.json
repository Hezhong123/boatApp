{"ast":null,"code":"\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\nimport invariant from 'invariant';\nvar turboModuleProxy = global.__turboModuleProxy;\nfunction requireModule(name) {\n  if (global.RN$Bridgeless !== true) {\n    var legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return legacyModule;\n    }\n  }\n  if (turboModuleProxy != null) {\n    var module = turboModuleProxy(name);\n    return module;\n  }\n  return null;\n}\nexport function get(name) {\n  return requireModule(name);\n}\nexport function getEnforcing(name) {\n  var module = requireModule(name);\n  invariant(module != null, \"TurboModuleRegistry.getEnforcing(...): '\" + name + \"' could not be found. \" + 'Verify that a module by this name is registered in the native binary.');\n  return module;\n}","map":{"version":3,"names":["NativeModules","require","invariant","turboModuleProxy","global","__turboModuleProxy","requireModule","name","RN$Bridgeless","legacyModule","module","get","getEnforcing"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nimport type {TurboModule} from './RCTExport';\nimport invariant from 'invariant';\n\nconst turboModuleProxy = global.__turboModuleProxy;\n\nfunction requireModule<T: TurboModule>(name: string): ?T {\n  // Bridgeless mode requires TurboModules\n  if (global.RN$Bridgeless !== true) {\n    // Backward compatibility layer during migration.\n    const legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return ((legacyModule: $FlowFixMe): T);\n    }\n  }\n\n  if (turboModuleProxy != null) {\n    const module: ?T = turboModuleProxy(name);\n    return module;\n  }\n\n  return null;\n}\n\nexport function get<T: TurboModule>(name: string): ?T {\n  return requireModule<T>(name);\n}\n\nexport function getEnforcing<T: TurboModule>(name: string): T {\n  const module = requireModule<T>(name);\n  invariant(\n    module != null,\n    `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` +\n      'Verify that a module by this name is registered in the native binary.',\n  );\n  return module;\n}\n"],"mappings":";;AAUA,IAAMA,aAAa,GAAGC,OAAO,kCAAkC;AAE/D,OAAOC,SAAS,MAAM,WAAW;AAEjC,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,kBAAkB;AAElD,SAASC,aAAa,CAAiBC,IAAY,EAAM;EAEvD,IAAIH,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;IAEjC,IAAMC,YAAY,GAAGT,aAAa,CAACO,IAAI,CAAC;IACxC,IAAIE,YAAY,IAAI,IAAI,EAAE;MACxB,OAASA,YAAY;IACvB;EACF;EAEA,IAAIN,gBAAgB,IAAI,IAAI,EAAE;IAC5B,IAAMO,MAAU,GAAGP,gBAAgB,CAACI,IAAI,CAAC;IACzC,OAAOG,MAAM;EACf;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,SAASC,GAAG,CAAiBJ,IAAY,EAAM;EACpD,OAAOD,aAAa,CAAIC,IAAI,CAAC;AAC/B;AAEA,OAAO,SAASK,YAAY,CAAiBL,IAAY,EAAK;EAC5D,IAAMG,MAAM,GAAGJ,aAAa,CAAIC,IAAI,CAAC;EACrCL,SAAS,CACPQ,MAAM,IAAI,IAAI,EACd,6CAA2CH,IAAI,8BAC7C,uEAAuE,CAC1E;EACD,OAAOG,MAAM;AACf"},"metadata":{},"sourceType":"module"}