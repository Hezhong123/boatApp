{"ast":null,"code":"\n\n'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar invariant = require('invariant');\n\nvar MatrixMath = {\n  createIdentityMatrix: function createIdentityMatrix() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n  createCopy: function createCopy(m) {\n    return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];\n  },\n  createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {\n    var a = 2 / (right - left);\n    var b = 2 / (top - bottom);\n    var c = -2 / (far - near);\n    var tx = -(right + left) / (right - left);\n    var ty = -(top + bottom) / (top - bottom);\n    var tz = -(far + near) / (far - near);\n    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];\n  },\n  createFrustum: function createFrustum(left, right, bottom, top, near, far) {\n    var r_width = 1 / (right - left);\n    var r_height = 1 / (top - bottom);\n    var r_depth = 1 / (near - far);\n    var x = 2 * (near * r_width);\n    var y = 2 * (near * r_height);\n    var A = (right + left) * r_width;\n    var B = (top + bottom) * r_height;\n    var C = (far + near) * r_depth;\n    var D = 2 * (far * near * r_depth);\n    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];\n  },\n  createPerspective: function createPerspective(fovInRadians, aspect, near, far) {\n    var h = 1 / Math.tan(fovInRadians / 2);\n    var r_depth = 1 / (near - far);\n    var C = (far + near) * r_depth;\n    var D = 2 * (far * near * r_depth);\n    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];\n  },\n  createTranslate2d: function createTranslate2d(x, y) {\n    var mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseTranslate2dCommand(mat, x, y);\n    return mat;\n  },\n  reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n  },\n  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n    matrixCommand[14] = z;\n  },\n  createScale: function createScale(factor) {\n    var mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseScaleCommand(mat, factor);\n    return mat;\n  },\n  reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {\n    matrixCommand[0] = factor;\n    matrixCommand[5] = factor;\n  },\n  reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {\n    matrixCommand[0] = x;\n    matrixCommand[5] = y;\n    matrixCommand[10] = z;\n  },\n  reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {\n    matrixCommand[11] = -1 / p;\n  },\n  reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {\n    matrixCommand[0] = factor;\n  },\n  reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {\n    matrixCommand[5] = factor;\n  },\n  reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {\n    matrixCommand[10] = factor;\n  },\n  reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {\n    matrixCommand[5] = Math.cos(radians);\n    matrixCommand[6] = Math.sin(radians);\n    matrixCommand[9] = -Math.sin(radians);\n    matrixCommand[10] = Math.cos(radians);\n  },\n  reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {\n    matrixCommand[0] = Math.cos(amount);\n    matrixCommand[2] = -Math.sin(amount);\n    matrixCommand[8] = Math.sin(amount);\n    matrixCommand[10] = Math.cos(amount);\n  },\n  reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {\n    matrixCommand[0] = Math.cos(radians);\n    matrixCommand[1] = Math.sin(radians);\n    matrixCommand[4] = -Math.sin(radians);\n    matrixCommand[5] = Math.cos(radians);\n  },\n  createRotateZ: function createRotateZ(radians) {\n    var mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateZCommand(mat, radians);\n    return mat;\n  },\n  reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {\n    matrixCommand[4] = Math.tan(radians);\n  },\n  reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {\n    matrixCommand[1] = Math.tan(radians);\n  },\n  multiplyInto: function multiplyInto(out, a, b) {\n    var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n    var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  },\n  determinant: function determinant(matrix) {\n    var _matrix = _slicedToArray(matrix, 16),\n      m00 = _matrix[0],\n      m01 = _matrix[1],\n      m02 = _matrix[2],\n      m03 = _matrix[3],\n      m10 = _matrix[4],\n      m11 = _matrix[5],\n      m12 = _matrix[6],\n      m13 = _matrix[7],\n      m20 = _matrix[8],\n      m21 = _matrix[9],\n      m22 = _matrix[10],\n      m23 = _matrix[11],\n      m30 = _matrix[12],\n      m31 = _matrix[13],\n      m32 = _matrix[14],\n      m33 = _matrix[15];\n    return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;\n  },\n  inverse: function inverse(matrix) {\n    var det = MatrixMath.determinant(matrix);\n    if (!det) {\n      return matrix;\n    }\n    var _matrix2 = _slicedToArray(matrix, 16),\n      m00 = _matrix2[0],\n      m01 = _matrix2[1],\n      m02 = _matrix2[2],\n      m03 = _matrix2[3],\n      m10 = _matrix2[4],\n      m11 = _matrix2[5],\n      m12 = _matrix2[6],\n      m13 = _matrix2[7],\n      m20 = _matrix2[8],\n      m21 = _matrix2[9],\n      m22 = _matrix2[10],\n      m23 = _matrix2[11],\n      m30 = _matrix2[12],\n      m31 = _matrix2[13],\n      m32 = _matrix2[14],\n      m33 = _matrix2[15];\n    return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];\n  },\n  transpose: function transpose(m) {\n    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];\n  },\n  multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {\n    var _v = _slicedToArray(v, 4),\n      vx = _v[0],\n      vy = _v[1],\n      vz = _v[2],\n      vw = _v[3];\n    return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];\n  },\n  v3Length: function v3Length(a) {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);\n  },\n  v3Normalize: function v3Normalize(vector, v3Length) {\n    var im = 1 / (v3Length || MatrixMath.v3Length(vector));\n    return [vector[0] * im, vector[1] * im, vector[2] * im];\n  },\n  v3Dot: function v3Dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  },\n  v3Combine: function v3Combine(a, b, aScale, bScale) {\n    return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];\n  },\n  v3Cross: function v3Cross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  },\n  quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {\n    var _q = _slicedToArray(q, 4),\n      qx = _q[0],\n      qy = _q[1],\n      qz = _q[2],\n      qw = _q[3];\n    var qw2 = qw * qw;\n    var qx2 = qx * qx;\n    var qy2 = qy * qy;\n    var qz2 = qz * qz;\n    var test = qx * qy + qz * qw;\n    var unit = qw2 + qx2 + qy2 + qz2;\n    var conv = 180 / Math.PI;\n    if (test > 0.49999 * unit) {\n      return [0, 2 * Math.atan2(qx, qw) * conv, 90];\n    }\n    if (test < -0.49999 * unit) {\n      return [0, -2 * Math.atan2(qx, qw) * conv, -90];\n    }\n    return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];\n  },\n  roundTo3Places: function roundTo3Places(n) {\n    var arr = n.toString().split('e');\n    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;\n  },\n  decomposeMatrix: function decomposeMatrix(transformMatrix) {\n    invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);\n\n    var perspective = [];\n    var quaternion = [];\n    var scale = [];\n    var skew = [];\n    var translation = [];\n\n    if (!transformMatrix[15]) {\n      return;\n    }\n    var matrix = [];\n    var perspectiveMatrix = [];\n    for (var i = 0; i < 4; i++) {\n      matrix.push([]);\n      for (var j = 0; j < 4; j++) {\n        var value = transformMatrix[i * 4 + j] / transformMatrix[15];\n        matrix[i].push(value);\n        perspectiveMatrix.push(j === 3 ? 0 : value);\n      }\n    }\n    perspectiveMatrix[15] = 1;\n\n    if (!MatrixMath.determinant(perspectiveMatrix)) {\n      return;\n    }\n\n    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {\n      var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];\n\n      var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);\n      var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);\n      perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);\n    } else {\n      perspective[0] = perspective[1] = perspective[2] = 0;\n      perspective[3] = 1;\n    }\n\n    for (var _i = 0; _i < 3; _i++) {\n      translation[_i] = matrix[3][_i];\n    }\n\n    var row = [];\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      row[_i2] = [matrix[_i2][0], matrix[_i2][1], matrix[_i2][2]];\n    }\n\n    scale[0] = MatrixMath.v3Length(row[0]);\n    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);\n\n    skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n\n    scale[1] = MatrixMath.v3Length(row[1]);\n    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);\n    skew[0] /= scale[1];\n\n    skew[1] = MatrixMath.v3Dot(row[0], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);\n    skew[2] = MatrixMath.v3Dot(row[1], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);\n\n    scale[2] = MatrixMath.v3Length(row[2]);\n    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);\n    skew[1] /= scale[2];\n    skew[2] /= scale[2];\n\n    var pdum3 = MatrixMath.v3Cross(row[1], row[2]);\n    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        scale[_i3] *= -1;\n        row[_i3][0] *= -1;\n        row[_i3][1] *= -1;\n        row[_i3][2] *= -1;\n      }\n    }\n\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n    if (row[2][1] > row[1][2]) {\n      quaternion[0] = -quaternion[0];\n    }\n    if (row[0][2] > row[2][0]) {\n      quaternion[1] = -quaternion[1];\n    }\n    if (row[1][0] > row[0][1]) {\n      quaternion[2] = -quaternion[2];\n    }\n\n    var rotationDegrees;\n    if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {\n      rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];\n    } else {\n      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);\n    }\n\n    return {\n      rotationDegrees: rotationDegrees,\n      perspective: perspective,\n      quaternion: quaternion,\n      scale: scale,\n      skew: skew,\n      translation: translation,\n      rotate: rotationDegrees[2],\n      rotateX: rotationDegrees[0],\n      rotateY: rotationDegrees[1],\n      scaleX: scale[0],\n      scaleY: scale[1],\n      translateX: translation[0],\n      translateY: translation[1]\n    };\n  }\n};\nmodule.exports = MatrixMath;","map":{"version":3,"names":["invariant","require","MatrixMath","createIdentityMatrix","createCopy","m","createOrthographic","left","right","bottom","top","near","far","a","b","c","tx","ty","tz","createFrustum","r_width","r_height","r_depth","x","y","A","B","C","D","createPerspective","fovInRadians","aspect","h","Math","tan","createTranslate2d","mat","reuseTranslate2dCommand","matrixCommand","reuseTranslate3dCommand","z","createScale","factor","reuseScaleCommand","reuseScale3dCommand","reusePerspectiveCommand","p","reuseScaleXCommand","reuseScaleYCommand","reuseScaleZCommand","reuseRotateXCommand","radians","cos","sin","reuseRotateYCommand","amount","reuseRotateZCommand","createRotateZ","reuseSkewXCommand","reuseSkewYCommand","multiplyInto","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","determinant","matrix","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","inverse","det","transpose","multiplyVectorByMatrix","v","vx","vy","vz","vw","v3Length","sqrt","v3Normalize","vector","im","v3Dot","v3Combine","aScale","bScale","v3Cross","quaternionToDegreesXYZ","q","row","qx","qy","qz","qw","qw2","qx2","qy2","qz2","test","unit","conv","PI","atan2","roundTo3Places","asin","n","arr","toString","split","round","decomposeMatrix","transformMatrix","length","perspective","quaternion","scale","skew","translation","perspectiveMatrix","i","push","j","value","rightHandSide","inversePerspectiveMatrix","transposedInversePerspectiveMatrix","pdum3","max","rotationDegrees","rotate","rotateX","rotateY","scaleX","scaleY","translateX","translateY","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Utilities/MatrixMath.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\n/**\n * Memory conservative (mutative) matrix math utilities. Uses \"command\"\n * matrices, which are reusable.\n */\nconst MatrixMath = {\n  createIdentityMatrix: function () {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n\n  createCopy: function (m) {\n    return [\n      m[0],\n      m[1],\n      m[2],\n      m[3],\n      m[4],\n      m[5],\n      m[6],\n      m[7],\n      m[8],\n      m[9],\n      m[10],\n      m[11],\n      m[12],\n      m[13],\n      m[14],\n      m[15],\n    ];\n  },\n\n  createOrthographic: function (left, right, bottom, top, near, far) {\n    const a = 2 / (right - left);\n    const b = 2 / (top - bottom);\n    const c = -2 / (far - near);\n\n    const tx = -(right + left) / (right - left);\n    const ty = -(top + bottom) / (top - bottom);\n    const tz = -(far + near) / (far - near);\n\n    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];\n  },\n\n  createFrustum: function (left, right, bottom, top, near, far) {\n    const r_width = 1 / (right - left);\n    const r_height = 1 / (top - bottom);\n    const r_depth = 1 / (near - far);\n    const x = 2 * (near * r_width);\n    const y = 2 * (near * r_height);\n    const A = (right + left) * r_width;\n    const B = (top + bottom) * r_height;\n    const C = (far + near) * r_depth;\n    const D = 2 * (far * near * r_depth);\n    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];\n  },\n\n  /**\n   * This create a perspective projection towards negative z\n   * Clipping the z range of [-near, -far]\n   *\n   * @param fovInRadians - field of view in radians\n   */\n  createPerspective: function (fovInRadians, aspect, near, far) {\n    const h = 1 / Math.tan(fovInRadians / 2);\n    const r_depth = 1 / (near - far);\n    const C = (far + near) * r_depth;\n    const D = 2 * (far * near * r_depth);\n    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];\n  },\n\n  createTranslate2d: function (x, y) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseTranslate2dCommand(mat, x, y);\n    return mat;\n  },\n\n  reuseTranslate2dCommand: function (matrixCommand, x, y) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n  },\n\n  reuseTranslate3dCommand: function (matrixCommand, x, y, z) {\n    matrixCommand[12] = x;\n    matrixCommand[13] = y;\n    matrixCommand[14] = z;\n  },\n\n  createScale: function (factor) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseScaleCommand(mat, factor);\n    return mat;\n  },\n\n  reuseScaleCommand: function (matrixCommand, factor) {\n    matrixCommand[0] = factor;\n    matrixCommand[5] = factor;\n  },\n\n  reuseScale3dCommand: function (matrixCommand, x, y, z) {\n    matrixCommand[0] = x;\n    matrixCommand[5] = y;\n    matrixCommand[10] = z;\n  },\n\n  reusePerspectiveCommand: function (matrixCommand, p) {\n    matrixCommand[11] = -1 / p;\n  },\n\n  reuseScaleXCommand(matrixCommand, factor) {\n    matrixCommand[0] = factor;\n  },\n\n  reuseScaleYCommand(matrixCommand, factor) {\n    matrixCommand[5] = factor;\n  },\n\n  reuseScaleZCommand(matrixCommand, factor) {\n    matrixCommand[10] = factor;\n  },\n\n  reuseRotateXCommand: function (matrixCommand, radians) {\n    matrixCommand[5] = Math.cos(radians);\n    matrixCommand[6] = Math.sin(radians);\n    matrixCommand[9] = -Math.sin(radians);\n    matrixCommand[10] = Math.cos(radians);\n  },\n\n  reuseRotateYCommand: function (matrixCommand, amount) {\n    matrixCommand[0] = Math.cos(amount);\n    matrixCommand[2] = -Math.sin(amount);\n    matrixCommand[8] = Math.sin(amount);\n    matrixCommand[10] = Math.cos(amount);\n  },\n\n  // http://www.w3.org/TR/css3-transforms/#recomposing-to-a-2d-matrix\n  reuseRotateZCommand: function (matrixCommand, radians) {\n    matrixCommand[0] = Math.cos(radians);\n    matrixCommand[1] = Math.sin(radians);\n    matrixCommand[4] = -Math.sin(radians);\n    matrixCommand[5] = Math.cos(radians);\n  },\n\n  createRotateZ: function (radians) {\n    const mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateZCommand(mat, radians);\n    return mat;\n  },\n\n  reuseSkewXCommand: function (matrixCommand, radians) {\n    matrixCommand[4] = Math.tan(radians);\n  },\n\n  reuseSkewYCommand: function (matrixCommand, radians) {\n    matrixCommand[1] = Math.tan(radians);\n  },\n\n  multiplyInto: function (out, a, b) {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7],\n      a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11],\n      a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    let b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  },\n\n  determinant(matrix: Array<number>): number {\n    const [\n      m00,\n      m01,\n      m02,\n      m03,\n      m10,\n      m11,\n      m12,\n      m13,\n      m20,\n      m21,\n      m22,\n      m23,\n      m30,\n      m31,\n      m32,\n      m33,\n    ] = matrix;\n    return (\n      m03 * m12 * m21 * m30 -\n      m02 * m13 * m21 * m30 -\n      m03 * m11 * m22 * m30 +\n      m01 * m13 * m22 * m30 +\n      m02 * m11 * m23 * m30 -\n      m01 * m12 * m23 * m30 -\n      m03 * m12 * m20 * m31 +\n      m02 * m13 * m20 * m31 +\n      m03 * m10 * m22 * m31 -\n      m00 * m13 * m22 * m31 -\n      m02 * m10 * m23 * m31 +\n      m00 * m12 * m23 * m31 +\n      m03 * m11 * m20 * m32 -\n      m01 * m13 * m20 * m32 -\n      m03 * m10 * m21 * m32 +\n      m00 * m13 * m21 * m32 +\n      m01 * m10 * m23 * m32 -\n      m00 * m11 * m23 * m32 -\n      m02 * m11 * m20 * m33 +\n      m01 * m12 * m20 * m33 +\n      m02 * m10 * m21 * m33 -\n      m00 * m12 * m21 * m33 -\n      m01 * m10 * m22 * m33 +\n      m00 * m11 * m22 * m33\n    );\n  },\n\n  /**\n   * Inverse of a matrix. Multiplying by the inverse is used in matrix math\n   * instead of division.\n   *\n   * Formula from:\n   * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n   */\n  inverse(matrix: Array<number>): Array<number> {\n    const det = MatrixMath.determinant(matrix);\n    if (!det) {\n      return matrix;\n    }\n    const [\n      m00,\n      m01,\n      m02,\n      m03,\n      m10,\n      m11,\n      m12,\n      m13,\n      m20,\n      m21,\n      m22,\n      m23,\n      m30,\n      m31,\n      m32,\n      m33,\n    ] = matrix;\n    return [\n      (m12 * m23 * m31 -\n        m13 * m22 * m31 +\n        m13 * m21 * m32 -\n        m11 * m23 * m32 -\n        m12 * m21 * m33 +\n        m11 * m22 * m33) /\n        det,\n      (m03 * m22 * m31 -\n        m02 * m23 * m31 -\n        m03 * m21 * m32 +\n        m01 * m23 * m32 +\n        m02 * m21 * m33 -\n        m01 * m22 * m33) /\n        det,\n      (m02 * m13 * m31 -\n        m03 * m12 * m31 +\n        m03 * m11 * m32 -\n        m01 * m13 * m32 -\n        m02 * m11 * m33 +\n        m01 * m12 * m33) /\n        det,\n      (m03 * m12 * m21 -\n        m02 * m13 * m21 -\n        m03 * m11 * m22 +\n        m01 * m13 * m22 +\n        m02 * m11 * m23 -\n        m01 * m12 * m23) /\n        det,\n      (m13 * m22 * m30 -\n        m12 * m23 * m30 -\n        m13 * m20 * m32 +\n        m10 * m23 * m32 +\n        m12 * m20 * m33 -\n        m10 * m22 * m33) /\n        det,\n      (m02 * m23 * m30 -\n        m03 * m22 * m30 +\n        m03 * m20 * m32 -\n        m00 * m23 * m32 -\n        m02 * m20 * m33 +\n        m00 * m22 * m33) /\n        det,\n      (m03 * m12 * m30 -\n        m02 * m13 * m30 -\n        m03 * m10 * m32 +\n        m00 * m13 * m32 +\n        m02 * m10 * m33 -\n        m00 * m12 * m33) /\n        det,\n      (m02 * m13 * m20 -\n        m03 * m12 * m20 +\n        m03 * m10 * m22 -\n        m00 * m13 * m22 -\n        m02 * m10 * m23 +\n        m00 * m12 * m23) /\n        det,\n      (m11 * m23 * m30 -\n        m13 * m21 * m30 +\n        m13 * m20 * m31 -\n        m10 * m23 * m31 -\n        m11 * m20 * m33 +\n        m10 * m21 * m33) /\n        det,\n      (m03 * m21 * m30 -\n        m01 * m23 * m30 -\n        m03 * m20 * m31 +\n        m00 * m23 * m31 +\n        m01 * m20 * m33 -\n        m00 * m21 * m33) /\n        det,\n      (m01 * m13 * m30 -\n        m03 * m11 * m30 +\n        m03 * m10 * m31 -\n        m00 * m13 * m31 -\n        m01 * m10 * m33 +\n        m00 * m11 * m33) /\n        det,\n      (m03 * m11 * m20 -\n        m01 * m13 * m20 -\n        m03 * m10 * m21 +\n        m00 * m13 * m21 +\n        m01 * m10 * m23 -\n        m00 * m11 * m23) /\n        det,\n      (m12 * m21 * m30 -\n        m11 * m22 * m30 -\n        m12 * m20 * m31 +\n        m10 * m22 * m31 +\n        m11 * m20 * m32 -\n        m10 * m21 * m32) /\n        det,\n      (m01 * m22 * m30 -\n        m02 * m21 * m30 +\n        m02 * m20 * m31 -\n        m00 * m22 * m31 -\n        m01 * m20 * m32 +\n        m00 * m21 * m32) /\n        det,\n      (m02 * m11 * m30 -\n        m01 * m12 * m30 -\n        m02 * m10 * m31 +\n        m00 * m12 * m31 +\n        m01 * m10 * m32 -\n        m00 * m11 * m32) /\n        det,\n      (m01 * m12 * m20 -\n        m02 * m11 * m20 +\n        m02 * m10 * m21 -\n        m00 * m12 * m21 -\n        m01 * m10 * m22 +\n        m00 * m11 * m22) /\n        det,\n    ];\n  },\n\n  /**\n   * Turns columns into rows and rows into columns.\n   */\n  transpose(m: Array<number>): Array<number> {\n    return [\n      m[0],\n      m[4],\n      m[8],\n      m[12],\n      m[1],\n      m[5],\n      m[9],\n      m[13],\n      m[2],\n      m[6],\n      m[10],\n      m[14],\n      m[3],\n      m[7],\n      m[11],\n      m[15],\n    ];\n  },\n\n  /**\n   * Based on: http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n   */\n  multiplyVectorByMatrix(v: Array<number>, m: Array<number>): Array<number> {\n    const [vx, vy, vz, vw] = v;\n    return [\n      vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12],\n      vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13],\n      vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14],\n      vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15],\n    ];\n  },\n\n  /**\n   * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Length(a: Array<number>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);\n  },\n\n  /**\n   * Based on: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Normalize(vector: Array<number>, v3Length: number): Array<number> {\n    const im = 1 / (v3Length || MatrixMath.v3Length(vector));\n    return [vector[0] * im, vector[1] * im, vector[2] * im];\n  },\n\n  /**\n   * The dot product of a and b, two 3-element vectors.\n   * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n   */\n  v3Dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  },\n\n  /**\n   * From:\n   * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n   */\n  v3Combine(\n    a: Array<number>,\n    b: Array<number>,\n    aScale: number,\n    bScale: number,\n  ): Array<number> {\n    return [\n      aScale * a[0] + bScale * b[0],\n      aScale * a[1] + bScale * b[1],\n      aScale * a[2] + bScale * b[2],\n    ];\n  },\n\n  /**\n   * From:\n   * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n   */\n  v3Cross(a: Array<number>, b: Array<number>): Array<number> {\n    return [\n      a[1] * b[2] - a[2] * b[1],\n      a[2] * b[0] - a[0] * b[2],\n      a[0] * b[1] - a[1] * b[0],\n    ];\n  },\n\n  /**\n   * Based on:\n   * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n   * and:\n   * http://quat.zachbennett.com/\n   *\n   * Note that this rounds degrees to the thousandth of a degree, due to\n   * floating point errors in the creation of the quaternion.\n   *\n   * Also note that this expects the qw value to be last, not first.\n   *\n   * Also, when researching this, remember that:\n   * yaw   === heading            === z-axis\n   * pitch === elevation/attitude === y-axis\n   * roll  === bank               === x-axis\n   */\n  quaternionToDegreesXYZ(q: Array<number>, matrix, row): Array<number> {\n    const [qx, qy, qz, qw] = q;\n    const qw2 = qw * qw;\n    const qx2 = qx * qx;\n    const qy2 = qy * qy;\n    const qz2 = qz * qz;\n    const test = qx * qy + qz * qw;\n    const unit = qw2 + qx2 + qy2 + qz2;\n    const conv = 180 / Math.PI;\n\n    if (test > 0.49999 * unit) {\n      return [0, 2 * Math.atan2(qx, qw) * conv, 90];\n    }\n    if (test < -0.49999 * unit) {\n      return [0, -2 * Math.atan2(qx, qw) * conv, -90];\n    }\n\n    return [\n      MatrixMath.roundTo3Places(\n        Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv,\n      ),\n      MatrixMath.roundTo3Places(\n        Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv,\n      ),\n      MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv),\n    ];\n  },\n\n  /**\n   * Based on:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n   */\n  roundTo3Places(n: number): number {\n    const arr = n.toString().split('e');\n    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;\n  },\n\n  /**\n   * Decompose a matrix into separate transform values, for use on platforms\n   * where applying a precomposed matrix is not possible, and transforms are\n   * applied in an inflexible ordering (e.g. Android).\n   *\n   * Implementation based on\n   * http://www.w3.org/TR/css3-transforms/#decomposing-a-2d-matrix\n   * http://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n   * which was based on\n   * http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n   */\n  decomposeMatrix(transformMatrix: Array<number>): ?Object {\n    invariant(\n      transformMatrix.length === 16,\n      'Matrix decomposition needs a list of 3d matrix values, received %s',\n      transformMatrix,\n    );\n\n    // output values\n    let perspective = [];\n    const quaternion = [];\n    const scale = [];\n    const skew = [];\n    const translation = [];\n\n    // create normalized, 2d array matrix\n    // and normalized 1d array perspectiveMatrix with redefined 4th column\n    if (!transformMatrix[15]) {\n      return;\n    }\n    const matrix = [];\n    const perspectiveMatrix = [];\n    for (let i = 0; i < 4; i++) {\n      matrix.push([]);\n      for (let j = 0; j < 4; j++) {\n        const value = transformMatrix[i * 4 + j] / transformMatrix[15];\n        matrix[i].push(value);\n        perspectiveMatrix.push(j === 3 ? 0 : value);\n      }\n    }\n    perspectiveMatrix[15] = 1;\n\n    // test for singularity of upper 3x3 part of the perspective matrix\n    if (!MatrixMath.determinant(perspectiveMatrix)) {\n      return;\n    }\n\n    // isolate perspective\n    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {\n      // rightHandSide is the right hand side of the equation.\n      // rightHandSide is a vector, or point in 3d space relative to the origin.\n      const rightHandSide = [\n        matrix[0][3],\n        matrix[1][3],\n        matrix[2][3],\n        matrix[3][3],\n      ];\n\n      // Solve the equation by inverting perspectiveMatrix and multiplying\n      // rightHandSide by the inverse.\n      const inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);\n      const transposedInversePerspectiveMatrix = MatrixMath.transpose(\n        inversePerspectiveMatrix,\n      );\n      perspective = MatrixMath.multiplyVectorByMatrix(\n        rightHandSide,\n        transposedInversePerspectiveMatrix,\n      );\n    } else {\n      // no perspective\n      perspective[0] = perspective[1] = perspective[2] = 0;\n      perspective[3] = 1;\n    }\n\n    // translation is simple\n    for (let i = 0; i < 3; i++) {\n      translation[i] = matrix[3][i];\n    }\n\n    // Now get scale and shear.\n    // 'row' is a 3 element array of 3 component vectors\n    const row = [];\n    for (let i = 0; i < 3; i++) {\n      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];\n    }\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = MatrixMath.v3Length(row[0]);\n    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = MatrixMath.v3Length(row[1]);\n    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);\n    skew[0] /= scale[1];\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = MatrixMath.v3Dot(row[0], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);\n    skew[2] = MatrixMath.v3Dot(row[1], row[2]);\n    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = MatrixMath.v3Length(row[2]);\n    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);\n    skew[1] /= scale[2];\n    skew[2] /= scale[2];\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    const pdum3 = MatrixMath.v3Cross(row[1], row[2]);\n    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {\n      for (let i = 0; i < 3; i++) {\n        scale[i] *= -1;\n        row[i][0] *= -1;\n        row[i][1] *= -1;\n        row[i][2] *= -1;\n      }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] =\n      0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n    quaternion[1] =\n      0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n    quaternion[2] =\n      0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n    quaternion[3] =\n      0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n\n    if (row[2][1] > row[1][2]) {\n      quaternion[0] = -quaternion[0];\n    }\n    if (row[0][2] > row[2][0]) {\n      quaternion[1] = -quaternion[1];\n    }\n    if (row[1][0] > row[0][1]) {\n      quaternion[2] = -quaternion[2];\n    }\n\n    // correct for occasional, weird Euler synonyms for 2d rotation\n    let rotationDegrees;\n    if (\n      quaternion[0] < 0.001 &&\n      quaternion[0] >= 0 &&\n      quaternion[1] < 0.001 &&\n      quaternion[1] >= 0\n    ) {\n      // this is a 2d rotation on the z-axis\n      rotationDegrees = [\n        0,\n        0,\n        MatrixMath.roundTo3Places(\n          (Math.atan2(row[0][1], row[0][0]) * 180) / Math.PI,\n        ),\n      ];\n    } else {\n      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(\n        quaternion,\n        matrix,\n        row,\n      );\n    }\n\n    // expose both base data and convenience names\n    return {\n      rotationDegrees,\n      perspective,\n      quaternion,\n      scale,\n      skew,\n      translation,\n\n      rotate: rotationDegrees[2],\n      rotateX: rotationDegrees[0],\n      rotateY: rotationDegrees[1],\n      scaleX: scale[0],\n      scaleY: scale[1],\n      translateX: translation[0],\n      translateY: translation[1],\n    };\n  },\n};\n\nmodule.exports = MatrixMath;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}