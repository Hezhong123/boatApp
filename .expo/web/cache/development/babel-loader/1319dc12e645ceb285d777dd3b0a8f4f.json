{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nimport NativeEventEmitter from \"../../EventEmitter/NativeEventEmitter\";\nimport LayoutAnimation from \"../../LayoutAnimation/LayoutAnimation\";\nimport dismissKeyboard from \"../../Utilities/dismissKeyboard\";\nimport Platform from \"../../Utilities/Platform\";\nimport NativeKeyboardObserver from \"./NativeKeyboardObserver\";\nvar Keyboard = function () {\n  function Keyboard() {\n    _classCallCheck(this, Keyboard);\n    this._emitter = new NativeEventEmitter(\n    Platform.OS !== 'ios' ? null : NativeKeyboardObserver);\n  }\n  _createClass(Keyboard, [{\n    key: \"addListener\",\n    value:\n    function addListener(eventType, listener, context) {\n      return this._emitter.addListener(eventType, listener);\n    }\n\n  }, {\n    key: \"removeListener\",\n    value:\n    function removeListener(eventType, listener) {\n      this._emitter.removeListener(eventType, listener);\n    }\n\n  }, {\n    key: \"removeAllListeners\",\n    value:\n    function removeAllListeners(eventType) {\n      this._emitter.removeAllListeners(eventType);\n    }\n\n  }, {\n    key: \"dismiss\",\n    value:\n    function dismiss() {\n      dismissKeyboard();\n    }\n\n  }, {\n    key: \"scheduleLayoutAnimation\",\n    value:\n    function scheduleLayoutAnimation(event) {\n      var duration = event.duration,\n        easing = event.easing;\n      if (duration != null && duration !== 0) {\n        LayoutAnimation.configureNext({\n          duration: duration,\n          update: {\n            duration: duration,\n            type: easing != null && LayoutAnimation.Types[easing] || 'keyboard'\n          }\n        });\n      }\n    }\n  }]);\n  return Keyboard;\n}();\nmodule.exports = new Keyboard();","map":{"version":3,"names":["NativeEventEmitter","LayoutAnimation","dismissKeyboard","Platform","NativeKeyboardObserver","Keyboard","_emitter","OS","eventType","listener","context","addListener","removeListener","removeAllListeners","event","duration","easing","configureNext","update","type","Types","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeEventEmitter from '../../EventEmitter/NativeEventEmitter';\nimport LayoutAnimation from '../../LayoutAnimation/LayoutAnimation';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport NativeKeyboardObserver from './NativeKeyboardObserver';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\n\nexport type KeyboardEventName = $Keys<KeyboardEventDefinitions>;\n\nexport type KeyboardEventEasing =\n  | 'easeIn'\n  | 'easeInEaseOut'\n  | 'easeOut'\n  | 'linear'\n  | 'keyboard';\n\nexport type KeyboardEventCoordinates = $ReadOnly<{|\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type KeyboardEvent = AndroidKeyboardEvent | IOSKeyboardEvent;\n\ntype BaseKeyboardEvent = {|\n  duration: number,\n  easing: KeyboardEventEasing,\n  endCoordinates: KeyboardEventCoordinates,\n|};\n\nexport type AndroidKeyboardEvent = $ReadOnly<{|\n  ...BaseKeyboardEvent,\n  duration: 0,\n  easing: 'keyboard',\n|}>;\n\nexport type IOSKeyboardEvent = $ReadOnly<{|\n  ...BaseKeyboardEvent,\n  startCoordinates: KeyboardEventCoordinates,\n  isEventFromThisApp: boolean,\n|}>;\n\ntype KeyboardEventDefinitions = {\n  keyboardWillShow: [KeyboardEvent],\n  keyboardDidShow: [KeyboardEvent],\n  keyboardWillHide: [KeyboardEvent],\n  keyboardDidHide: [KeyboardEvent],\n  keyboardWillChangeFrame: [KeyboardEvent],\n  keyboardDidChangeFrame: [KeyboardEvent],\n};\n\n/**\n * `Keyboard` module to control keyboard events.\n *\n * ### Usage\n *\n * The Keyboard module allows you to listen for native events and react to them, as\n * well as make changes to the keyboard, like dismissing it.\n *\n *```\n * import React, { Component } from 'react';\n * import { Keyboard, TextInput } from 'react-native';\n *\n * class Example extends Component {\n *   componentWillMount () {\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\n *   }\n *\n *   componentWillUnmount () {\n *     this.keyboardDidShowListener.remove();\n *     this.keyboardDidHideListener.remove();\n *   }\n *\n *   _keyboardDidShow () {\n *     alert('Keyboard Shown');\n *   }\n *\n *   _keyboardDidHide () {\n *     alert('Keyboard Hidden');\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         onSubmitEditing={Keyboard.dismiss}\n *       />\n *     );\n *   }\n * }\n *```\n */\n\nclass Keyboard {\n  _emitter: NativeEventEmitter<KeyboardEventDefinitions> =\n    new NativeEventEmitter(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeKeyboardObserver,\n    );\n\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\n   *can be any of the following:\n   *\n   * - `keyboardWillShow`\n   * - `keyboardDidShow`\n   * - `keyboardWillHide`\n   * - `keyboardDidHide`\n   * - `keyboardWillChangeFrame`\n   * - `keyboardDidChangeFrame`\n   *\n   * Note that if you set `android:windowSoftInputMode` to `adjustResize`  or `adjustNothing`,\n   * only `keyboardDidShow` and `keyboardDidHide` events will be available on Android.\n   * `keyboardWillShow` as well as `keyboardWillHide` are generally not available on Android\n   * since there is no native corresponding event.\n   *\n   * @param {function} callback function to be called when the event fires.\n   */\n  addListener<K: $Keys<KeyboardEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<KeyboardEventDefinitions, K>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    return this._emitter.addListener(eventType, listener);\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener<K: $Keys<KeyboardEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<KeyboardEventDefinitions, K>) => mixed,\n  ): void {\n    // NOTE: This will report a deprecation notice via `console.error`.\n    this._emitter.removeListener(eventType, listener);\n  }\n\n  /**\n   * Removes all listeners for a specific event type.\n   *\n   * @param {string} eventType The native event string listeners are watching which will be removed.\n   */\n  removeAllListeners<K: $Keys<KeyboardEventDefinitions>>(eventType: ?K): void {\n    this._emitter.removeAllListeners(eventType);\n  }\n\n  /**\n   * Dismisses the active keyboard and removes focus.\n   */\n  dismiss(): void {\n    dismissKeyboard();\n  }\n\n  /**\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\n   * position changes with keyboard movements.\n   */\n  scheduleLayoutAnimation(event: KeyboardEvent): void {\n    const {duration, easing} = event;\n    if (duration != null && duration !== 0) {\n      LayoutAnimation.configureNext({\n        duration: duration,\n        update: {\n          duration: duration,\n          type: (easing != null && LayoutAnimation.Types[easing]) || 'keyboard',\n        },\n      });\n    }\n  }\n}\n\nmodule.exports = (new Keyboard(): Keyboard);\n"],"mappings":";;;AAUA,OAAOA,kBAAkB;AACzB,OAAOC,eAAe;AACtB,OAAOC,eAAe;AACtB,OAAOC,QAAQ;AACf,OAAOC,sBAAsB;AAAiC,IA0FxDC,QAAQ;EAAA;IAAA;IAAA,KACZC,QAAQ,GACN,IAAIN,kBAAkB;IAGpBG,QAAQ,CAACI,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGH,sBAAsB,CACtD;EAAA;EAAA;IAAA;IAAA;IAyBH,qBACEI,SAAY,EACZC,QAAiE,EACjEC,OAAe,EACI;MACnB,OAAO,IAAI,CAACJ,QAAQ,CAACK,WAAW,CAACH,SAAS,EAAEC,QAAQ,CAAC;IACvD;;EAAC;IAAA;IAAA;IAKD,wBACED,SAAY,EACZC,QAAiE,EAC3D;MAEN,IAAI,CAACH,QAAQ,CAACM,cAAc,CAACJ,SAAS,EAAEC,QAAQ,CAAC;IACnD;;EAAC;IAAA;IAAA;IAOD,4BAAuDD,SAAa,EAAQ;MAC1E,IAAI,CAACF,QAAQ,CAACO,kBAAkB,CAACL,SAAS,CAAC;IAC7C;;EAAC;IAAA;IAAA;IAKD,mBAAgB;MACdN,eAAe,EAAE;IACnB;;EAAC;IAAA;IAAA;IAMD,iCAAwBY,KAAoB,EAAQ;MAClD,IAAOC,QAAQ,GAAYD,KAAK,CAAzBC,QAAQ;QAAEC,MAAM,GAAIF,KAAK,CAAfE,MAAM;MACvB,IAAID,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,CAAC,EAAE;QACtCd,eAAe,CAACgB,aAAa,CAAC;UAC5BF,QAAQ,EAAEA,QAAQ;UAClBG,MAAM,EAAE;YACNH,QAAQ,EAAEA,QAAQ;YAClBI,IAAI,EAAGH,MAAM,IAAI,IAAI,IAAIf,eAAe,CAACmB,KAAK,CAACJ,MAAM,CAAC,IAAK;UAC7D;QACF,CAAC,CAAC;MACJ;IACF;EAAC;EAAA;AAAA;AAGHK,MAAM,CAACC,OAAO,GAAI,IAAIjB,QAAQ,EAAa"},"metadata":{},"sourceType":"module"}