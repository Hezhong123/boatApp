{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nfunction getBasePath(_ref) {\n  var httpServerLocation = _ref.httpServerLocation;\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n  return httpServerLocation;\n}\nfunction getScale() {\n  return Dimensions.get('window').scale;\n}\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? \".\" + asset.type : '');\n}\nvar AssetSourceResolver = function () {\n\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return !!this.serverUrl;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      if (this.isLoadedFromServer()) {\n        return this.assetServerURL();\n      }\n      return this.scaledAssetURLNearBundle();\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      invariant(!!this.serverUrl, 'need server to load from');\n      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n    }\n  }, {\n    key: \"scaledAssetPath\",\n    value: function scaledAssetPath() {\n      return this.fromSource(getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"scaledAssetURLNearBundle\",\n    value: function scaledAssetURLNearBundle() {\n      var path = this.jsbundleUrl || '';\n      return this.fromSource(path + getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"resourceIdentifierWithoutScale\",\n    value: function resourceIdentifierWithoutScale() {\n      throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n    }\n  }, {\n    key: \"drawableFolderInBundle\",\n    value: function drawableFolderInBundle() {\n      throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return {\n        __packager_asset: true,\n        width: this.asset.width,\n        height: this.asset.height,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, getScale())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n  return AssetSourceResolver;\n}();\nexport { AssetSourceResolver as default };","map":{"version":3,"mappings":"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","names":["Platform","UnavailabilityError","invariant","getBasePath","httpServerLocation","substr","getScale","Dimensions","get","scale","getScaledAssetPath","asset","AssetSourceResolver","pickScale","scales","scaleSuffix","assetDir","name","type","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","scaledAssetURLNearBundle","fromSource","OS","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length"],"sourceRoot":"","sources":["../src/AssetSourceResolver.web.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport { Dimensions } from 'react-native';\n\ntype PackagerAsset = {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  httpServerLocation: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  hash: string;\n  name: string;\n  type: string;\n};\n\nfunction getBasePath({ httpServerLocation }: PackagerAsset): string {\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n  return httpServerLocation;\n}\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\nfunction getScale(): number {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? `.${asset.type}` : '');\n}\n\nexport default class AssetSourceResolver {\n  serverUrl?: string | null;\n  // where the jsbundle is being run from\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    return this.scaledAssetURLNearBundle();\n  }\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash\n    );\n  }\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || '';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n  }\n  drawableFolderInBundle(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n  }\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, getScale()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}