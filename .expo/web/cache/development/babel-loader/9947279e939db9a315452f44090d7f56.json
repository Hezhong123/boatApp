{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { PermissionStatus, createPermissionHook, EventEmitter, Platform } from 'expo-modules-core';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { RecordingOptionsPresets } from \"./RecordingConstants\";\nimport { Sound } from \"./Sound\";\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    return ExponentAV.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    return ExponentAV.requestPermissionsAsync();\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});\nexport var Recording = function () {\n  function Recording() {\n    var _this = this;\n    _classCallCheck(this, Recording);\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n    this._cleanupForUnloadedRecorder = function () {\n      var _ref = _asyncToGenerator(function* (finalStatus) {\n        var _finalStatus$duration;\n        _this._canRecord = false;\n        _this._isDoneRecording = true;\n        _this._finalDurationMillis = (_finalStatus$duration = finalStatus == null ? void 0 : finalStatus.durationMillis) != null ? _finalStatus$duration : 0;\n        _recorderExists = false;\n        if (_this._subscription) {\n          _this._subscription.remove();\n          _this._subscription = null;\n        }\n        _this._disablePolling();\n        return yield _this.getStatusAsync();\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this._pollingLoop = _asyncToGenerator(function* () {\n      if (isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null) {\n        _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n        try {\n          yield _this.getStatusAsync();\n        } catch (_unused) {\n          _this._disablePolling();\n        }\n      }\n    });\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      if (_this._canRecord) {\n        return _this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.getAudioRecordingStatus();\n        });\n      }\n      var status = {\n        canRecord: false,\n        isRecording: false,\n        isDoneRecording: _this._isDoneRecording,\n        durationMillis: _this._finalDurationMillis\n      };\n      _this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    });\n  }\n  _createClass(Recording, [{\n    key: \"_disablePolling\",\n    value: function _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n  }, {\n    key: \"_enablePollingIfNecessaryAndPossible\",\n    value: function _enablePollingIfNecessaryAndPossible() {\n      if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n        this._pollingLoop();\n      }\n    }\n  }, {\n    key: \"_callOnRecordingStatusUpdateForNewStatus\",\n    value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function () {\n      var _performOperationAndHandleStatusAsync2 = _asyncToGenerator(function* (operation) {\n        throwIfAudioIsDisabled();\n        if (this._canRecord) {\n          var status = yield operation();\n          this._callOnRecordingStatusUpdateForNewStatus(status);\n          return status;\n        } else {\n          throw new Error('Cannot complete operation because this recorder is not ready to record.');\n        }\n      });\n      function _performOperationAndHandleStatusAsync(_x2) {\n        return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n      }\n      return _performOperationAndHandleStatusAsync;\n    }()\n  }, {\n    key: \"setOnRecordingStatusUpdate\",\n    value:\n    function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setProgressUpdateInterval\",\n    value:\n    function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"prepareToRecordAsync\",\n    value: function () {\n      var _prepareToRecordAsync = _asyncToGenerator(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RecordingOptionsPresets.LOW_QUALITY;\n        throwIfAudioIsDisabled();\n        if (_recorderExists) {\n          throw new Error('Only one Recording object can be prepared at a given time.');\n        }\n        if (this._isDoneRecording) {\n          throw new Error('This Recording object is done recording; you must make a new one.');\n        }\n        if (!options || !options.android || !options.ios) {\n          throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n        }\n        var extensionRegex = /^\\.\\w+$/;\n        if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n          throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n        }\n        if (!this._canRecord) {\n          if (eventEmitter) {\n            this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n          }\n          var _yield$ExponentAV$pre = yield ExponentAV.prepareAudioRecorder(options),\n            uri = _yield$ExponentAV$pre.uri,\n            status = _yield$ExponentAV$pre.status;\n          _recorderExists = true;\n          this._uri = uri;\n          this._options = options;\n          this._canRecord = true;\n          var currentStatus = _objectSpread(_objectSpread({}, status), {}, {\n            canRecord: true\n          });\n          this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n          this._enablePollingIfNecessaryAndPossible();\n          return currentStatus;\n        } else {\n          throw new Error('This Recording object is already prepared to record.');\n        }\n      });\n      function prepareToRecordAsync() {\n        return _prepareToRecordAsync.apply(this, arguments);\n      }\n      return prepareToRecordAsync;\n    }()\n  }, {\n    key: \"getAvailableInputs\",\n    value: function () {\n      var _getAvailableInputs = _asyncToGenerator(function* () {\n        return ExponentAV.getAvailableInputs();\n      });\n      function getAvailableInputs() {\n        return _getAvailableInputs.apply(this, arguments);\n      }\n      return getAvailableInputs;\n    }()\n  }, {\n    key: \"getCurrentInput\",\n    value: function () {\n      var _getCurrentInput = _asyncToGenerator(function* () {\n        return ExponentAV.getCurrentInput();\n      });\n      function getCurrentInput() {\n        return _getCurrentInput.apply(this, arguments);\n      }\n      return getCurrentInput;\n    }()\n  }, {\n    key: \"setInput\",\n    value: function () {\n      var _setInput = _asyncToGenerator(function* (inputUid) {\n        return ExponentAV.setInput(inputUid);\n      });\n      function setInput(_x3) {\n        return _setInput.apply(this, arguments);\n      }\n      return setInput;\n    }()\n  }, {\n    key: \"startAsync\",\n    value: function () {\n      var _startAsync = _asyncToGenerator(function* () {\n        return this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.startAudioRecording();\n        });\n      });\n      function startAsync() {\n        return _startAsync.apply(this, arguments);\n      }\n      return startAsync;\n    }()\n  }, {\n    key: \"pauseAsync\",\n    value: function () {\n      var _pauseAsync = _asyncToGenerator(function* () {\n        return this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.pauseAudioRecording();\n        });\n      });\n      function pauseAsync() {\n        return _pauseAsync.apply(this, arguments);\n      }\n      return pauseAsync;\n    }()\n  }, {\n    key: \"stopAndUnloadAsync\",\n    value: function () {\n      var _stopAndUnloadAsync = _asyncToGenerator(function* () {\n        var _stopResult;\n        if (!this._canRecord) {\n          if (this._isDoneRecording) {\n            throw new Error('Cannot unload a Recording that has already been unloaded.');\n          } else {\n            throw new Error('Cannot unload a Recording that has not been prepared.');\n          }\n        }\n        var stopResult;\n        var stopError;\n        try {\n          stopResult = yield ExponentAV.stopAudioRecording();\n        } catch (err) {\n          stopError = err;\n        }\n        if (Platform.OS === 'web' && ((_stopResult = stopResult) == null ? void 0 : _stopResult.uri) !== undefined) {\n          this._uri = stopResult.uri;\n        }\n        yield ExponentAV.unloadAudioRecorder();\n        var status = yield this._cleanupForUnloadedRecorder(stopResult);\n        return stopError ? Promise.reject(stopError) : status;\n      });\n      function stopAndUnloadAsync() {\n        return _stopAndUnloadAsync.apply(this, arguments);\n      }\n      return stopAndUnloadAsync;\n    }()\n  }, {\n    key: \"getURI\",\n    value:\n    function getURI() {\n      return this._uri;\n    }\n  }, {\n    key: \"createNewLoadedSound\",\n    value: function () {\n      var _createNewLoadedSound = _asyncToGenerator(function* () {\n        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n        return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n      });\n      function createNewLoadedSound() {\n        return _createNewLoadedSound.apply(this, arguments);\n      }\n      return createNewLoadedSound;\n    }()\n  }, {\n    key: \"createNewLoadedSoundAsync\",\n    value: function () {\n      var _createNewLoadedSoundAsync = _asyncToGenerator(function* () {\n        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (this._uri == null || !this._isDoneRecording) {\n          throw new Error('Cannot create sound when the Recording has not finished!');\n        }\n        return Sound.createAsync(\n        {\n          uri: this._uri\n        }, initialStatus, onPlaybackStatusUpdate, false);\n      });\n      function createNewLoadedSoundAsync() {\n        return _createNewLoadedSoundAsync.apply(this, arguments);\n      }\n      return createNewLoadedSoundAsync;\n    }()\n  }]);\n  return Recording;\n}();\nRecording.createAsync = _asyncToGenerator(function* () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RecordingOptionsPresets.LOW_QUALITY;\n  var onRecordingStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var progressUpdateIntervalMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var recording = new Recording();\n  if (progressUpdateIntervalMillis) {\n    recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n  }\n  recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n  yield recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {\n    keepAudioActiveHint: true\n  }));\n  try {\n    var status = yield recording.startAsync();\n    return {\n      recording: recording,\n      status: status\n    };\n  } catch (err) {\n    recording.stopAndUnloadAsync();\n    throw err;\n  }\n});\nexport { PermissionStatus };\nexport * from \"./RecordingConstants\";\nexport * from \"./Recording.types\";","map":{"version":3,"mappings":"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","names":["PermissionStatus","createPermissionHook","EventEmitter","Platform","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","ExponentAV","isAudioEnabled","throwIfAudioIsDisabled","RecordingOptionsPresets","Sound","_recorderExists","eventEmitter","OS","getPermissionsAsync","requestPermissionsAsync","usePermissions","getMethod","requestMethod","Recording","_subscription","_canRecord","_isDoneRecording","_finalDurationMillis","_uri","_onRecordingStatusUpdate","_progressUpdateTimeoutVariable","_progressUpdateIntervalMillis","_options","_cleanupForUnloadedRecorder","finalStatus","durationMillis","remove","_disablePolling","getStatusAsync","_pollingLoop","setTimeout","_performOperationAndHandleStatusAsync","getAudioRecordingStatus","status","canRecord","isRecording","isDoneRecording","_callOnRecordingStatusUpdateForNewStatus","clearTimeout","operation","Error","onRecordingStatusUpdate","_enablePollingIfNecessaryAndPossible","progressUpdateIntervalMillis","options","LOW_QUALITY","android","ios","extensionRegex","extension","test","toString","addListener","prepareAudioRecorder","uri","currentStatus","getAvailableInputs","getCurrentInput","inputUid","setInput","startAudioRecording","pauseAudioRecording","stopResult","stopError","stopAudioRecording","err","undefined","unloadAudioRecorder","Promise","reject","initialStatus","onPlaybackStatusUpdate","console","warn","createNewLoadedSoundAsync","createAsync","recording","setOnRecordingStatusUpdate","prepareToRecordAsync","keepAudioActiveHint","startAsync","stopAndUnloadAsync"],"sourceRoot":"","sources":["../../src/Audio/Recording.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  RecordingInput,\n  RecordingObject,\n  RecordingOptions,\n  RecordingStatus,\n} from './Recording.types';\nimport { RecordingOptionsPresets } from './RecordingConstants';\nimport { Sound, SoundObject } from './Sound';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\n/**\n * Checks user's permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n * at any given time.\n *\n * Note that your experience must request audio recording permissions in order for recording to function.\n * See the [`Permissions` module](/guides/permissions) for more details.\n *\n * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n *\n * @example\n * ```ts\n * const recording = new Audio.Recording();\n * try {\n *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n *   await recording.startAsync();\n *   // You are now recording!\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * @return A newly constructed instance of `Audio.Recording`.\n */\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  /**\n   * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n   *\n   * ```ts\n   * const { recording, status } = await Audio.Recording.createAsync(\n   *   options,\n   *   onRecordingStatusUpdate,\n   *   progressUpdateIntervalMillis\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const recording = new Audio.Recording();\n   * await recording.prepareToRecordAsync(options);\n   * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n   * await recording.startAsync();\n   * ```\n   *\n   * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n   * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n   * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n   * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n   *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n   *   );\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n   */\n  static createAsync = async (\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<RecordingObject> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  /**\n   * Gets the `status` of the `Recording`.\n   * @return A `Promise` that is resolved with the `RecordingStatus` object.\n   */\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n   *\n   * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n   * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n   * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   *\n   * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n   */\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n   * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n   */\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  /**\n   * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n   * This method can only be called if the `Recording` instance has never yet been prepared.\n   *\n   * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n   * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n   *\n   * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n   * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n   * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async prepareToRecordAsync(\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  /**\n   * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n   */\n  async getAvailableInputs(): Promise<RecordingInput[]> {\n    return ExponentAV.getAvailableInputs();\n  }\n\n  /**\n   * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n   */\n  async getCurrentInput(): Promise<RecordingInput> {\n    return ExponentAV.getCurrentInput();\n  }\n\n  /**\n   * Sets the current recording input.\n   * @param inputUid The uid of a `RecordingInput`.\n   * @return A `Promise` that is resolved if successful or rejected if not.\n   */\n  async setInput(inputUid: string): Promise<void> {\n    return ExponentAV.setInput(inputUid);\n  }\n\n  /**\n   * Begins recording. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  /**\n   * Pauses recording. This method can only be called if the `Recording` has been prepared.\n   *\n   * > This is only available on Android API version 24 and later.\n   *\n   * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n   * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n   * `RecordingStatus` of the recording.\n   */\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  /**\n   * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n   * to an unprepared state, and another `Recording` instance must be created in order to record again.\n   * This method can only be called if the `Recording` has been prepared.\n   *\n   * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n   * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n   *\n   * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  /**\n   * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n   * to record. On web, this will not return the URI until the recording is finished.\n   * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n   * to record (or, on Web, if the recording has not finished).\n   */\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /**\n   * @deprecated Use `createNewLoadedSoundAsync()` instead.\n   */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  /**\n   * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n   * is done recording and `stopAndUnloadAsync()` has been called.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n   * and the default initial playback status.\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n   */\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\nexport * from './RecordingConstants';\n\nexport * from './Recording.types';\n"]},"metadata":{},"sourceType":"module"}