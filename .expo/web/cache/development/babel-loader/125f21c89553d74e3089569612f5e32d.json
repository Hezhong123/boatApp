{"ast":null,"code":"\n\n'use strict';\n\nvar AssetRegistry = require('@react-native/assets/registry');\nvar AssetSourceResolver = require(\"./AssetSourceResolver\");\nvar _require = require(\"./AssetUtils\"),\n  pickScale = _require.pickScale;\nvar _customSourceTransformer, _serverURL, _scriptURL;\nvar _sourceCodeScriptURL;\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = require(\"../NativeModules/specs/NativeSourceCode\").default;\n  }\n  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\nfunction _coerceLocalScriptURL(scriptURL) {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\nfunction getScriptURL() {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\nfunction setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\n\nfunction resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  var asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;","map":{"version":3,"names":["AssetRegistry","require","AssetSourceResolver","pickScale","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","global","nativeExtensions","SourceCode","default","getConstants","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n// Resolves an asset into a `source` for `Image`.\n\n'use strict';\n\nconst AssetRegistry = require('@react-native/assets/registry');\nconst AssetSourceResolver = require('./AssetSourceResolver');\nconst {pickScale} = require('./AssetUtils');\n\nimport type {ResolvedAssetSource} from './AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _scriptURL;\n\nlet _sourceCodeScriptURL: ?string;\nfunction getSourceCodeScriptURL(): ?string {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode =\n    global.nativeExtensions && global.nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = require('../NativeModules/specs/NativeSourceCode').default;\n  }\n  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match =\n      sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"],"mappings":";;AAYA,YAAY;;AAEZ,IAAMA,aAAa,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAC9D,IAAMC,mBAAmB,GAAGD,OAAO,yBAAyB;AAC5D,eAAoBA,OAAO,gBAAgB;EAApCE,SAAS,YAATA,SAAS;AAIhB,IAAIC,wBAAwB,EAAEC,UAAU,EAAEC,UAAU;AAEpD,IAAIC,oBAA6B;AACjC,SAASC,sBAAsB,GAAY;EACzC,IAAID,oBAAoB,EAAE;IACxB,OAAOA,oBAAoB;EAC7B;EAEA,IAAIE,UAAU,GACZC,MAAM,CAACC,gBAAgB,IAAID,MAAM,CAACC,gBAAgB,CAACC,UAAU;EAC/D,IAAI,CAACH,UAAU,EAAE;IACfA,UAAU,GAAGR,OAAO,2CAA2C,CAACY,OAAO;EACzE;EACAN,oBAAoB,GAAGE,UAAU,CAACK,YAAY,EAAE,CAACC,SAAS;EAC1D,OAAOR,oBAAoB;AAC7B;AAEA,SAASS,eAAe,GAAY;EAClC,IAAIX,UAAU,KAAKY,SAAS,EAAE;IAC5B,IAAMC,mBAAmB,GAAGV,sBAAsB,EAAE;IACpD,IAAMW,KAAK,GACTD,mBAAmB,IAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC;IACvE,IAAIA,KAAK,EAAE;MAETd,UAAU,GAAGc,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MAELd,UAAU,GAAG,IAAI;IACnB;EACF;EACA,OAAOA,UAAU;AACnB;AAEA,SAASe,qBAAqB,CAACL,SAAkB,EAAW;EAC1D,IAAIA,SAAS,EAAE;IACb,IAAIA,SAAS,CAACM,UAAU,CAAC,WAAW,CAAC,EAAE;MAErC,OAAO,IAAI;IACb;IACAN,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAACQ,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClE,IAAI,CAACR,SAAS,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAE;MAG9BT,SAAS,GAAG,SAAS,GAAGA,SAAS;IACnC;EACF;EACA,OAAOA,SAAS;AAClB;AAEA,SAASU,YAAY,GAAY;EAC/B,IAAInB,UAAU,KAAKW,SAAS,EAAE;IAC5BX,UAAU,GAAGc,qBAAqB,CAACZ,sBAAsB,EAAE,CAAC;EAC9D;EACA,OAAOF,UAAU;AACnB;AAEA,SAASoB,0BAA0B,CACjCC,WAAmE,EAC7D;EACNvB,wBAAwB,GAAGuB,WAAW;AACxC;;AAMA,SAASC,kBAAkB,CAACC,MAAW,EAAwB;EAC7D,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;EACf;EAEA,IAAMC,KAAK,GAAG9B,aAAa,CAAC+B,YAAY,CAACF,MAAM,CAAC;EAChD,IAAI,CAACC,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,IAAME,QAAQ,GAAG,IAAI9B,mBAAmB,CACtCc,eAAe,EAAE,EACjBS,YAAY,EAAE,EACdK,KAAK,CACN;EACD,IAAI1B,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAAC4B,QAAQ,CAAC;EAC3C;EACA,OAAOA,QAAQ,CAACC,YAAY,EAAE;AAChC;AAEAC,MAAM,CAACC,OAAO,GAAGP,kBAAkB;AACnCM,MAAM,CAACC,OAAO,CAAChC,SAAS,GAAGA,SAAS;AACpC+B,MAAM,CAACC,OAAO,CAACT,0BAA0B,GAAGA,0BAA0B"},"metadata":{},"sourceType":"script"}