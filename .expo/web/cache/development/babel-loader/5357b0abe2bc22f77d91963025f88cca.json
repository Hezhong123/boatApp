{"ast":null,"code":"\n\nvar rejectionTrackingOptions = {\n  allRejections: true,\n  onUnhandled: function onUnhandled(id) {\n    var _message;\n    var rejection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var message;\n    var stack;\n\n    var stringValue = Object.prototype.toString.call(rejection);\n    if (stringValue === '[object Error]') {\n      message = Error.prototype.toString.call(rejection);\n      var error = rejection;\n      stack = error.stack;\n    } else {\n      try {\n        message = require('pretty-format')(rejection);\n      } catch (_unused) {\n        message = typeof rejection === 'string' ? rejection : JSON.stringify(rejection);\n      }\n    }\n    var warning = \"Possible Unhandled Promise Rejection (id: \" + id + \"):\\n\" + (((_message = message) != null ? _message : '') + \"\\n\") + (stack == null ? '' : stack);\n    console.warn(warning);\n  },\n  onHandled: function onHandled(id) {\n    var warning = \"Promise Rejection Handled (id: \" + id + \")\\n\" + 'This means you can ignore any previous messages of the form ' + (\"\\\"Possible Unhandled Promise Rejection (id: \" + id + \"):\\\"\");\n    console.warn(warning);\n  }\n};\nexport default rejectionTrackingOptions;","map":{"version":3,"names":["rejectionTrackingOptions","allRejections","onUnhandled","id","rejection","message","stack","stringValue","Object","prototype","toString","call","Error","error","require","JSON","stringify","warning","console","warn","onHandled"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/promiseRejectionTrackingOptions.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport typeof {enable} from 'promise/setimmediate/rejection-tracking';\n\ntype ExtractOptionsType = <P>(((options?: ?P) => void)) => P;\n\nlet rejectionTrackingOptions: $Call<ExtractOptionsType, enable> = {\n  allRejections: true,\n  onUnhandled: (id, rejection = {}) => {\n    let message: string;\n    let stack: ?string;\n\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    const stringValue = Object.prototype.toString.call(rejection);\n    if (stringValue === '[object Error]') {\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      message = Error.prototype.toString.call(rejection);\n      const error: Error = (rejection: $FlowFixMe);\n      stack = error.stack;\n    } else {\n      try {\n        message = require('pretty-format')(rejection);\n      } catch {\n        message =\n          typeof rejection === 'string'\n            ? rejection\n            : JSON.stringify((rejection: $FlowFixMe));\n      }\n    }\n\n    const warning =\n      `Possible Unhandled Promise Rejection (id: ${id}):\\n` +\n      `${message ?? ''}\\n` +\n      (stack == null ? '' : stack);\n    console.warn(warning);\n  },\n  onHandled: id => {\n    const warning =\n      `Promise Rejection Handled (id: ${id})\\n` +\n      'This means you can ignore any previous messages of the form ' +\n      `\"Possible Unhandled Promise Rejection (id: ${id}):\"`;\n    console.warn(warning);\n  },\n};\n\nexport default rejectionTrackingOptions;\n"],"mappings":";;AAcA,IAAIA,wBAA2D,GAAG;EAChEC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,qBAACC,EAAE,EAAqB;IAAA;IAAA,IAAnBC,SAAS,uEAAG,CAAC,CAAC;IAC9B,IAAIC,OAAe;IACnB,IAAIC,KAAc;;IAGlB,IAAMC,WAAW,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACP,SAAS,CAAC;IAC7D,IAAIG,WAAW,KAAK,gBAAgB,EAAE;MAEpCF,OAAO,GAAGO,KAAK,CAACH,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACP,SAAS,CAAC;MAClD,IAAMS,KAAY,GAAIT,SAAsB;MAC5CE,KAAK,GAAGO,KAAK,CAACP,KAAK;IACrB,CAAC,MAAM;MACL,IAAI;QACFD,OAAO,GAAGS,OAAO,CAAC,eAAe,CAAC,CAACV,SAAS,CAAC;MAC/C,CAAC,CAAC,gBAAM;QACNC,OAAO,GACL,OAAOD,SAAS,KAAK,QAAQ,GACzBA,SAAS,GACTW,IAAI,CAACC,SAAS,CAAEZ,SAAS,CAAc;MAC/C;IACF;IAEA,IAAMa,OAAO,GACX,+CAA6Cd,EAAE,0BAC5CE,OAAO,uBAAI,EAAE,SAAI,IACnBC,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGA,KAAK,CAAC;IAC9BY,OAAO,CAACC,IAAI,CAACF,OAAO,CAAC;EACvB,CAAC;EACDG,SAAS,EAAE,mBAAAjB,EAAE,EAAI;IACf,IAAMc,OAAO,GACX,oCAAkCd,EAAE,WACpC,8DAA8D,qDAChBA,EAAE,UAAK;IACvDe,OAAO,CAACC,IAAI,CAACF,OAAO,CAAC;EACvB;AACF,CAAC;AAED,eAAejB,wBAAwB"},"metadata":{},"sourceType":"module"}