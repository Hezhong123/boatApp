{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"defaultStatus\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var router = TabRouter(rest);\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [].concat(_toConsumableArray(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAEA,OAAOC,SAAP,IAEEC,UAFF;AAkEA,OAAO,IAAMC,aAAa,mCACrBD,UADwB;EAE3BE,UAAU,wBAAqB;IAC7B,OAAO;MAAEC,IAAI,EAAE;IAAR,CAAP;EACD,CAJ0B;EAK3BC,WAAW,yBAAqB;IAC9B,OAAO;MAAED,IAAI,EAAE;IAAR,CAAP;EACD,CAP0B;EAQ3BE,YAAY,0BAAqB;IAC/B,OAAO;MAAEF,IAAI,EAAE;IAAR,CAAP;EACD;AAAA,EAVI;AAaP,eAAe,SAASG,YAAT,OAMb;EAAA,8BALAC,aAAa;IAAbA,aAAa,mCAAG,QADmB;IAEhCC,gCAIHC;EACA,IAAMC,MAAM,GAAGX,SAAS,CAACS,IAAD,CAAxB;EAKA,IAAMG,iBAAiB,GACrBC,SADID,iBAAiB,CACrBC,KADwB;IAAA;IAAA,OAIrBC,OAAO,mBAACD,KAAK,CAACE,OAAP,mDAACC,eAAeC,IAAf,CAAqBC,YAAD;MAAA,OAAQA,EAAE,CAACd,IAAH,KAAY,QAAxC;IAAA,EAAD,CAJc;EAAA,CAA1B;EAMA,IAAMe,kBAAkB,GACtBN,SADIM,kBAAkB,CACtBN,KADyB,EAEgB;IACzC,IAAID,iBAAiB,CAACC,KAAD,CAArB,EAA8B;MAC5B,OAAOA,KAAP;IACD;IAED,uCACKA,KADE;MAELE,OAAO,+BACFF,KAAK,CAACE,OADF,IAEP;QACEX,IAAI,EAAE,QADR;QAEEgB,MAAM,EAAEZ,aAAa,KAAK,MAAlB,GAA2B,QAA3B,GAAsC;MAFhD,CAFO;IAAA;EAQZ,CAjBD;EAmBA,IAAMa,uBAAuB,GAC3BR,SADIQ,uBAAuB,CAC3BR,KAD8B,EAEW;IACzC,IAAI,CAACD,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;MAC7B,OAAOA,KAAP;IACD;IAED,uCACKA,KADE;MAELE,OAAO,EAAEF,KAAK,CAACE,OAAN,CAAcO,MAAd,CAAsBJ,YAAD;QAAA,OAAQA,EAAE,CAACd,IAAH,KAAY,QAAzC;MAAA;IAAA;EAEZ,CAXD;EAaA,IAAMD,UAAU,GACdU,SADIV,UAAU,CACdU,KADiB,EAEwB;IACzC,IAAIL,aAAa,KAAK,MAAtB,EAA8B;MAC5B,OAAOa,uBAAuB,CAACR,KAAD,CAA9B;IACD;IAED,OAAOM,kBAAkB,CAACN,KAAD,CAAzB;EACD,CARD;EAUA,IAAMR,WAAW,GACfQ,SADIR,WAAW,CACfQ,KADkB,EAEuB;IACzC,IAAIL,aAAa,KAAK,MAAtB,EAA8B;MAC5B,OAAOW,kBAAkB,CAACN,KAAD,CAAzB;IACD;IAED,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;EACD,CARD;EAUA,uCACKF,MADE;IAGLP,IAAI,EAAE,QAHD;IAKLmB,eAAe,kCAAiD;MAAA,IAA9CC,UAAF,GAAgDC,MAA9CD,UAAF;QAAcE,cAAd,GAAgDD,MAAlCC,cAAd;QAA8BC,iBAAkBF,MAAlBE;MAC5C,IAAMd,KAAK,GAAGF,MAAM,CAACY,eAAP,CAAuB;QACnCC,UADmC,EACnCA,UADmC;QAEnCE,cAFmC,EAEnCA,cAFmC;QAGnCC;MAHmC,CAAvB,CAAd;MAMA,uCACKd,KADE;QAELe,OAAO,EAAEpB,aAFJ;QAGLqB,KAAK,EAAE,KAHF;QAILzB,IAAI,EAAE,QAJD;QAKL0B,GAAG,cAAY/B,MAAM;MAAG;IAE3B,CAnBI;IAqBLgC,kBAAkB,8BAChBC,YADgB,SAGhB;MAAA,IADER,UAAF,GACAS,MADET,UAAF;QAAcE,cAAd,GACAO,MADcP,cAAd;QAA8BC,iBAC9BM,MAD8BN;MAE9B,IAAIK,YAAY,CAACH,KAAb,KAAuB,KAA3B,EAAkC;QAChC,OAAOG,YAAP;MACD;MAED,IAAInB,KAAK,GAAGF,MAAM,CAACoB,kBAAP,CAA0BC,YAA1B,EAAwC;QAClDR,UADkD,EAClDA,UADkD;QAElDE,cAFkD,EAElDA,cAFkD;QAGlDC;MAHkD,CAAxC,CAAZ;MAMA,IAAIf,iBAAiB,CAACoB,YAAD,CAArB,EAAqC;QAEnCnB,KAAK,GAAGQ,uBAAuB,CAACR,KAAD,CAA/B;QACAA,KAAK,GAAGM,kBAAkB,CAACN,KAAD,CAA1B;MACD;MAED,uCACKA,KADE;QAELe,OAAO,EAAEpB,aAFJ;QAGLJ,IAAI,EAAE,QAHD;QAIL0B,GAAG,cAAY/B,MAAM;MAAG;IAE3B,CA/CI;IAiDLmC,qBAAqB,iCAACrB,KAAD,EAAQiB,GAAR,EAAa;MAChC,IAAMK,MAAM,GAAGxB,MAAM,CAACuB,qBAAP,CAA6BrB,KAA7B,EAAoCiB,GAApC,CAAf;MAEA,OAAOzB,WAAW,CAAC8B,MAAD,CAAlB;IACD,CArDI;IAuDLC,iBAAiB,6BAACvB,KAAD,EAAQwB,MAAR,EAAgBC,OAAhB,EAAyB;MACxC,QAAQD,MAAM,CAACjC,IAAf;QACE,KAAK,aAAL;UACE,OAAOD,UAAU,CAACU,KAAD,CAAjB;QAEF,KAAK,cAAL;UACE,OAAOR,WAAW,CAACQ,KAAD,CAAlB;QAEF,KAAK,eAAL;UACE,IAAID,iBAAiB,CAACC,KAAD,CAArB,EAA8B;YAC5B,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;UACD;UAED,OAAOM,kBAAkB,CAACN,KAAD,CAAzB;QAEF,KAAK,SAAL;QACA,KAAK,UAAL;UAAiB;YACf,IAAMsB,MAAM,GAAGxB,MAAM,CAACyB,iBAAP,CAAyBvB,KAAzB,EAAgCwB,MAAhC,EAAwCC,OAAxC,CAAf;YAEA,IAAIH,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACI,KAAP,KAAiB1B,KAAK,CAAC0B,KAA7C,EAAoD;cAClD,OAAOlC,WAAW,CAAC8B,MAAD,CAAlB;YACD;YAED,OAAOA,MAAP;UACD;QAED,KAAK,SAAL;UACE,IAAIvB,iBAAiB,CAACC,KAAD,CAArB,EAA8B;YAC5B,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;UACD;UAED,OAAOF,MAAM,CAACyB,iBAAP,CAAyBvB,KAAzB,EAAgCwB,MAAhC,EAAwCC,OAAxC,CAAP;QAEF;UACE,OAAO3B,MAAM,CAACyB,iBAAP,CAAyBvB,KAAzB,EAAgCwB,MAAhC,EAAwCC,OAAxC,CAAP;MAAA;IAEL,CA3FI;IA6FLE,cAAc,EAAEtC;EAAAA;AAEnB","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","_ref","router","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","_ref2","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}