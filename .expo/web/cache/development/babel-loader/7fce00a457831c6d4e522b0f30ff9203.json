{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function () {\n    var _ref = _asyncToGenerator(function* (error, isFatal) {\n      if (ExpoErrorRecovery.saveRecoveryProps) {\n        yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n      }\n      globalHandler(error, isFatal);\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAE5C,SAASC,sBAAsB;AAC/B,OAAOC,iBAAiB;AAExB,IAAIF,QAAQ,CAACG,EAAE,KAAK,KAAK,EAAE;EACzB,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAgB,EAAE;EAGnDD,UAAU,CAACE,gBAAgB;IAAA,6BAAC,WAAOC,KAAK,EAAEC,OAAO,EAAI;MACnD,IAAIP,iBAAiB,CAACQ,iBAAiB,EAAE;QACvC,MAAMR,iBAAiB,CAACQ,iBAAiB,CAACT,sBAAsB,EAAE,CAAC;;MAErEG,aAAa,CAACI,KAAK,EAAEC,OAAO,CAAC;IAC/B,CAAC;IAAA;MAAA;IAAA;EAAA,IAAC;CACH,MAAM,IAAIT,QAAQ,CAACG,EAAE,KAAK,KAAK,IAAIH,QAAQ,CAACW,cAAc,EAAE;EAC3DC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpCX,iBAAiB,CAACQ,iBAAiB,CAACT,sBAAsB,EAAE,CAAC;EAC/D,CAAC,CAAC","names":["Platform","getRecoveryPropsToSave","ExpoErrorRecovery","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","error","isFatal","saveRecoveryProps","isDOMAvailable","window","addEventListener"],"sourceRoot":"","sources":["../src/ErrorRecovery.fx.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"]},"metadata":{},"sourceType":"module"}