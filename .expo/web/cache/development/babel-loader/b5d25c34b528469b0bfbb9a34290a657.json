{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\nvar Platform = require(\"../Utilities/Platform\");\nvar UIManagerProperties = require(\"./UIManagerProperties\");\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\nimport NativeUIManager from \"./NativeUIManager\";\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\nfunction _getViewManagerConfig(viewManagerName) {\n  if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook &&\n  NativeUIManager.getConstantsForViewManager) {\n    try {\n      viewManagerConfigs[viewManagerName] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\"NativeUIManager.getConstantsForViewManager('\" + viewManagerName + \"') threw an exception.\", e);\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n  var config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n  if (NativeUIManager.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n    var result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      _getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n  return viewManagerConfigs[viewManagerName];\n}\n\nvar UIManagerJS = _objectSpread(_objectSpread({}, NativeUIManager), {}, {\n  createView: function createView(reactTag, viewName, rootTag, props) {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      _getViewManagerConfig(viewName);\n    }\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName) != null;\n  }\n});\n\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\n\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: function get() {\n        return NativeUIManager.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["NativeModules","require","Platform","UIManagerProperties","defineLazyObjectProperty","NativeUIManager","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","getViewManagerConfig","viewManagerName","undefined","global","nativeCallSyncHook","getConstantsForViewManager","e","console","error","config","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","UIManagerJS","createView","reactTag","viewName","rootTag","props","OS","hasViewManagerConfig","Manager","get","viewManager","constants","Object","keys","forEach","key","value","commands","index","ViewManagerNames","includes","warn","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nimport NativeUIManager from './NativeUIManager';\nimport type {RootTag} from 'react-native/Libraries/Types/RootTagTypes';\n\nconst viewManagerConfigs = {};\n\nconst triedLoadingConfig = new Set();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\nfunction getViewManagerConfig(viewManagerName: string): any {\n  if (\n    viewManagerConfigs[viewManagerName] === undefined &&\n    global.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method\n    NativeUIManager.getConstantsForViewManager\n  ) {\n    try {\n      viewManagerConfigs[viewManagerName] =\n        NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\n        \"NativeUIManager.getConstantsForViewManager('\" +\n          viewManagerName +\n          \"') threw an exception.\",\n        e,\n      );\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  // If we're in the Chrome Debugger, let's not even try calling the sync\n  // method.\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (\n    NativeUIManager.lazilyLoadView &&\n    !triedLoadingConfig.has(viewManagerName)\n  ) {\n    const result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\n/* $FlowFixMe[cannot-spread-interface] (>=0.123.0 site=react_native_fb) This\n * comment suppresses an error found when Flow v0.123.0 was deployed. To see\n * the error, delete this comment and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  createView(\n    reactTag: ?number,\n    viewName: string,\n    rootTag: RootTag,\n    props: Object,\n  ): void {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      // This is necessary to force the initialization of native viewManager\n      // classes in iOS when using static ViewConfigs\n      getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName: string): any {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName: string): boolean {\n    return getViewManagerConfig(viewManagerName) != null;\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe[prop-missing]\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}