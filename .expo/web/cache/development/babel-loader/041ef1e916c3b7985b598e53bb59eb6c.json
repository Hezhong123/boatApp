{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\nvar _customSourceTransformer;\nvar _serverURL;\nvar _sourceCodeScriptURL;\nfunction getSourceCodeScriptURL() {\n  var _sourceCode;\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n  var sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules == null ? void 0 : NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = (_sourceCode = sourceCode) == null ? void 0 : _sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  var asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n  var resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"mappings":";AAEA,SAASA,YAAY;AACrB,OAAOC,mBAA4C;AAInD,IAAIC,wBAAwB;AAC5B,IAAIC,UAAqC;AACzC,IAAIC,oBAA+C;AAEnD,SAASC,sBAAsB;EAAA;EAC7B,IAAID,oBAAoB,EAAE;IACxB,OAAOA,oBAAoB;;EAG7B,IAAIE,UAAU,GAAG,OAAOC,gBAAgB,KAAK,WAAW,GAAGA,gBAAgB,CAACC,UAAU,GAAG,IAAI;EAC7F,IAAI,CAACF,UAAU,EAAE;IACfA,UAAU,GAAGG,aAAa,oBAAbA,aAAa,CAAED,UAAU;;EAExCJ,oBAAoB,kBAAGE,UAAU,qBAAV,YAAYI,SAAS;EAC5C,OAAON,oBAAoB;AAC7B;AAEA,SAASO,eAAe;EACtB,IAAIR,UAAU,KAAKS,SAAS,EAAE;IAC5B,IAAMC,mBAAmB,GAAGR,sBAAsB,EAAE;IACpD,IAAMS,KAAK,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC;IACnF,IAAIA,KAAK,EAAE;MAETX,UAAU,GAAGW,KAAK,CAAC,CAAC,CAAC;KACtB,MAAM;MAELX,UAAU,GAAG,IAAI;;;EAGrB,OAAOA,UAAU;AACnB;AAEA,OAAM,SAAUY,0BAA0B,CACxCC,WAAmE;EAEnEd,wBAAwB,GAAGc,WAAW;AACxC;AAMA,eAAc,SAAUC,kBAAkB,CAACC,MAAW;EACpD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;;EAGf,IAAMC,KAAK,GAAGnB,YAAY,CAACkB,MAAM,CAAC;EAClC,IAAI,CAACC,KAAK,EAAE;IACV,OAAOP,SAAS;;EAGlB,IAAMQ,QAAQ,GAAG,IAAInB,mBAAmB,CAACU,eAAe,EAAE,EAAE,IAAI,EAAEQ,KAAK,CAAC;EACxE,IAAIjB,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAACkB,QAAQ,CAAC;;EAE3C,OAAOA,QAAQ,CAACC,YAAY,EAAE;AAChC;AAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,EAAE,4BAA4B,EAAE;EACtEO,GAAG;IACD,OAAOT,0BAA0B;EACnC;CACD,CAAC;AAEK,IAAQU,SAAS,GAAKxB,mBAAmB,CAAjCwB,SAAS;AAAyB","names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sourceRoot":"","sources":["../src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"module"}