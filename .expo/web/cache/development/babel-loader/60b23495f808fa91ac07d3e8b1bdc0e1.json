{"ast":null,"code":"\n\nimport PlatformBaseViewConfig from \"../NativeComponent/PlatformBaseViewConfig\";\nvar IGNORED_KEYS = ['transform', 'hitSlop'];\n\nexport default function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {\n  for (var prop of ['validAttributes', 'bubblingEventTypes', 'directEventTypes']) {\n    var diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));\n    if (diff.length > 0) {\n      var _staticViewConfig$uiV;\n      var name = (_staticViewConfig$uiV = staticViewConfig.uiViewClassName) != null ? _staticViewConfig$uiV : nativeViewConfig.uiViewClassName;\n      console.error(\"'\" + name + \"' has a view config that does not match native. \" + (\"'\" + prop + \"' is missing: \" + diff.join(', ')));\n    }\n  }\n}\n\nfunction lefthandObjectDiff(leftObj, rightObj) {\n  var differentKeys = {};\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n    if (typeof leftItem === 'object') {\n      var objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n  for (var key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n  return differentKeys;\n}\nexport function getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n  return Object.keys(viewConfig[propName]).filter(function (prop) {\n    return !PlatformBaseViewConfig[propName][prop];\n  }).reduce(function (obj, prop) {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\nexport function stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, function (key, val) {\n    if (typeof val === 'function') {\n      return \"\\u0192 \" + val.name;\n    }\n    return val;\n  }, 2);\n}","map":{"version":3,"names":["PlatformBaseViewConfig","IGNORED_KEYS","verifyComponentAttributeEquivalence","nativeViewConfig","staticViewConfig","prop","diff","Object","keys","lefthandObjectDiff","length","name","uiViewClassName","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","reduce","obj","stringifyViewConfig","JSON","stringify","val"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport PlatformBaseViewConfig from '../NativeComponent/PlatformBaseViewConfig';\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nexport default function verifyComponentAttributeEquivalence(\n  nativeViewConfig: ViewConfig,\n  staticViewConfig: ViewConfig,\n) {\n  for (const prop of [\n    'validAttributes',\n    'bubblingEventTypes',\n    'directEventTypes',\n  ]) {\n    const diff = Object.keys(\n      lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]),\n    );\n\n    if (diff.length > 0) {\n      const name =\n        staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\n      console.error(\n        `'${name}' has a view config that does not match native. ` +\n          `'${prop}' is missing: ${diff.join(', ')}`,\n      );\n    }\n  }\n}\n\n// Return the different key-value pairs of the right object, by iterating through the keys in the left object\n// Note it won't return a difference where a key is missing in the left but exists the right.\nfunction lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys = {};\n\n  function compare(leftItem: any, rightItem: any, key: string) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ViewConfig,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !PlatformBaseViewConfig[propName][prop])\n    .reduce((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `Æ’ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}