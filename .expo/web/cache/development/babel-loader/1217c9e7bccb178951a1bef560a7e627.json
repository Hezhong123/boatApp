{"ast":null,"code":"\n\n'use strict';\n\nvar androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi'\n};\n\nfunction getAndroidAssetSuffix(scale) {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n  throw new Error('no such scale ' + scale.toString());\n}\n\nvar drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  var suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\"Don't know which android drawable suffix to use for scale: \" + scale + '\\nAsset: ' + JSON.stringify(asset, null, '\\t') + '\\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\\t'));\n  }\n  return 'drawable-' + suffix;\n}\nfunction getAndroidResourceIdentifier(asset) {\n  return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');\n}\n\nfunction getBasePath(asset) {\n  var basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.substr(1) : basePath;\n}\nmodule.exports = {\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath\n};","map":{"version":3,"names":["androidScaleSuffix","getAndroidAssetSuffix","scale","toString","Error","drawableFileTypes","Set","getAndroidResourceFolderName","asset","has","type","suffix","JSON","stringify","getAndroidResourceIdentifier","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","startsWith","substr","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/@react-native/assets/path-support.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {PackagerAsset} from './registry.js';\n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset: PackagerAsset,\n  scale: number,\n): string | $TEMPORARY$string<'raw'> {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset): string {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.substr(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"],"mappings":";;AAUA,YAAY;;AAIZ,IAAMA,kBAAkB,GAAG;EACzB,MAAM,EAAE,MAAM;EACd,GAAG,EAAE,MAAM;EACX,KAAK,EAAE,MAAM;EACb,GAAG,EAAE,OAAO;EACZ,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE;AACP,CAAC;;AAMD,SAASC,qBAAqB,CAACC,KAAa,EAAU;EACpD,IAAIA,KAAK,CAACC,QAAQ,EAAE,IAAIH,kBAAkB,EAAE;IAC1C,OAAOA,kBAAkB,CAACE,KAAK,CAACC,QAAQ,EAAE,CAAC;EAC7C;EAEA,MAAM,IAAIC,KAAK,CAAC,gBAAgB,GAAGF,KAAK,CAACC,QAAQ,EAAE,CAAC;AACtD;;AAGA,IAAME,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAChC,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,EACN,KAAK,CACN,CAAC;AAEF,SAASC,4BAA4B,CACnCC,KAAoB,EACpBN,KAAa,EACsB;EACnC,IAAI,CAACG,iBAAiB,CAACI,GAAG,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;IACtC,OAAO,KAAK;EACd;EACA,IAAMC,MAAM,GAAGV,qBAAqB,CAACC,KAAK,CAAC;EAC3C,IAAI,CAACS,MAAM,EAAE;IACX,MAAM,IAAIP,KAAK,CACb,6DAA6D,GAC3DF,KAAK,GACL,WAAW,GACXU,IAAI,CAACC,SAAS,CAACL,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,GACjC,wBAAwB,GACxBI,IAAI,CAACC,SAAS,CAACb,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,CACjD;EACH;EACA,OAAO,WAAW,GAAGW,MAAM;AAC7B;AAEA,SAASG,4BAA4B,CAACN,KAAoB,EAAU;EAClE,OAAO,CAACO,WAAW,CAACP,KAAK,CAAC,GAAG,GAAG,GAAGA,KAAK,CAACQ,IAAI,EAC1CC,WAAW,EAAE,CACbC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AAC5B;;AAEA,SAASH,WAAW,CAACP,KAAoB,EAAU;EACjD,IAAMW,QAAQ,GAAGX,KAAK,CAACY,kBAAkB;EACzC,OAAOD,QAAQ,CAACE,UAAU,CAAC,GAAG,CAAC,GAAGF,QAAQ,CAACG,MAAM,CAAC,CAAC,CAAC,GAAGH,QAAQ;AACjE;AAEAI,MAAM,CAACC,OAAO,GAAG;EACfjB,4BAA4B,EAA5BA,4BAA4B;EAC5BO,4BAA4B,EAA5BA,4BAA4B;EAC5BC,WAAW,EAAXA;AACF,CAAC"},"metadata":{},"sourceType":"script"}