{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\n\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n    emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP;;AAYA,eAAe,SAASC,cAAT,OAGI;EAAA,IAFjBC,KADoE,GAGnDC,KAFjBD,KADoE;IAEpEE,UACiBD,KADjBC;EAEA,IAAMC,UAAU,GAAGN,KAAK,CAACO,UAAN,CAAiBN,iBAAjB,CAAnB;EACA,IAAMO,iBAAiB,GAAGR,KAAK,CAACS,MAAN,EAA1B;EAEA,IAAMC,iBAAiB,GAAGP,KAAK,CAACQ,MAAN,CAAaR,KAAK,CAACS,KAAnB,EAA0BC,GAApD;;EAIAb,KAAK,CAACc,SAAN,CACE;IAAA,OACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,OAAxB,EAAiC,YAAM;MACrCP,iBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B;MACAL,OAAO,CAACY,IAAR,CAAa;QAAEC,IAAI,EAAE,OAAR;QAAiBC,MAAM,EAAET;MAAzB,CAAb;IACD,CAHD,CAFJ;EAAA,GAME,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANF;EASAN,KAAK,CAACc,SAAN,CACE;IAAA,OACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,MAAxB,EAAgC,YAAM;MACpCP,iBAAiB,CAACQ,OAAlB,GAA4BI,SAA5B;MACAf,OAAO,CAACY,IAAR,CAAa;QAAEC,IAAI,EAAE,MAAR;QAAgBC,MAAM,EAAET;MAAxB,CAAb;IACD,CAHD,CAFJ;EAAA,GAME,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANF;EASAN,KAAK,CAACc,SAAN,CAAgB,YAAM;IACpB,IAAMO,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;IAEAR,iBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B;;IAIA,IAAIW,cAAc,KAAKD,SAAnB,IAAgC,CAACd,UAArC,EAAiD;MAC/CD,OAAO,CAACY,IAAR,CAAa;QAAEC,IAAI,EAAE,OAAR;QAAiBC,MAAM,EAAET;MAAzB,CAAb;IACD;;IAID,IACEW,cAAc,KAAKX,iBAAnB,IACA,EAAEJ,UAAU,GAAGA,UAAU,CAACgB,SAAX,EAAH,GAA4B,IAAxC,CAFF,EAGE;MACA;IACD;IAED,IAAID,cAAc,KAAKD,SAAvB,EAAkC;MAEhC;IACD;IAEDf,OAAO,CAACY,IAAR,CAAa;MAAEC,IAAI,EAAE,MAAR;MAAgBC,MAAM,EAAEE;IAAxB,CAAb;IACAhB,OAAO,CAACY,IAAR,CAAa;MAAEC,IAAI,EAAE,OAAR;MAAiBC,MAAM,EAAET;IAAzB,CAAb;EACD,CA3BD,EA2BG,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA3BH;AA4BD","names":["React","NavigationContext","useFocusEvents","state","_ref","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}