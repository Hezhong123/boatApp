{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport { setAutoServerRegistrationEnabledAsync } from \"./DevicePushTokenAutoRegistration.fx\";\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nexport default function getExpoPushTokenAsync() {\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction _getExpoPushTokenAsync() {\n  _getExpoPushTokenAsync = _asyncToGenerator(function* () {\n    var _Constants$expoConfig, _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest3, _options$baseUrl, _options$url;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var devicePushToken = options.devicePushToken || (yield getDevicePushTokenAsync());\n    var deviceId = options.deviceId || (yield getDeviceIdAsync());\n    var experienceId = options.experienceId || ((_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig.originalFullName) || ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.id);\n    var projectId = options.projectId || ((_Constants$manifest2 = Constants.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.eas) == null ? void 0 : _Constants$manifest2$2.projectId) || ((_Constants$manifest3 = Constants.manifest) == null ? void 0 : _Constants$manifest3.projectId);\n    if (!experienceId && !projectId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\");\n    }\n    var applicationId = options.applicationId || Application.applicationId;\n    if (!applicationId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n    }\n    var type = options.type || getTypeOfToken(devicePushToken);\n    var development = options.development || (yield shouldUseDevelopmentNotificationService());\n    var baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n    var url = (_options$url = options.url) != null ? _options$url : baseUrl + \"push/getExpoPushToken\";\n    var body = _objectSpread({\n      type: type,\n      deviceId: deviceId.toLowerCase(),\n      development: development,\n      appId: applicationId,\n      deviceToken: getDeviceToken(devicePushToken)\n    }, projectId ? {\n      projectId: projectId\n    } : {\n      experienceId: experienceId\n    });\n    var response = yield fetch(url, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).catch(function (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', \"Error encountered while fetching Expo token: \" + error + \".\");\n    });\n    if (!response.ok) {\n      var statusInfo = response.statusText || response.status;\n      var _body = undefined;\n      try {\n        _body = yield response.text();\n      } catch (_unused) {}\n      throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Error encountered while fetching Expo token, expected an OK response, received: \" + statusInfo + \" (body: \\\"\" + _body + \"\\\").\");\n    }\n    var expoPushToken = getExpoPushToken(yield parseResponse(response));\n    try {\n      if (options.url || options.baseUrl) {\n        console.debug(\"[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.\");\n      } else {\n        yield setAutoServerRegistrationEnabledAsync(true);\n      }\n    } catch (e) {\n      console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', e);\n    }\n    return {\n      type: 'expo',\n      data: expoPushToken\n    };\n  });\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction parseResponse(_x) {\n  return _parseResponse.apply(this, arguments);\n}\nfunction _parseResponse() {\n  _parseResponse = _asyncToGenerator(function* (response) {\n    try {\n      return yield response.json();\n    } catch (_unused2) {\n      try {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received body: \" + JSON.stringify(yield response.text()) + \".\");\n      } catch (_unused3) {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received response: \" + JSON.stringify(response) + \".\");\n      }\n    }\n  });\n  return _parseResponse.apply(this, arguments);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Malformed response from server, expected \\\"{ data: { expoPushToken: string } }\\\", received: \" + JSON.stringify(data, null, 2) + \".\");\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction _getDeviceIdAsync() {\n  _getDeviceIdAsync = _asyncToGenerator(function* () {\n    try {\n      if (!ServerRegistrationModule.getInstallationIdAsync) {\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      }\n      return yield ServerRegistrationModule.getInstallationIdAsync();\n    } catch (e) {\n      throw new CodedError('ERR_NOTIF_DEVICE_ID', \"Could not have fetched installation ID of the application: \" + e + \".\");\n    }\n  });\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction _shouldUseDevelopmentNotificationService() {\n  _shouldUseDevelopmentNotificationService = _asyncToGenerator(function* () {\n    if (Platform.OS === 'ios') {\n      try {\n        var notificationServiceEnvironment = yield Application.getIosPushNotificationServiceEnvironmentAsync();\n        if (notificationServiceEnvironment === 'development') {\n          return true;\n        }\n      } catch (_unused4) {}\n    }\n    return false;\n  });\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"mappings":"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","names":["Application","Constants","Platform","CodedError","UnavailabilityError","setAutoServerRegistrationEnabledAsync","ServerRegistrationModule","getDevicePushTokenAsync","productionBaseUrl","getExpoPushTokenAsync","options","devicePushToken","deviceId","getDeviceIdAsync","experienceId","expoConfig","originalFullName","manifest","id","projectId","manifest2","extra","eas","applicationId","type","getTypeOfToken","development","shouldUseDevelopmentNotificationService","baseUrl","url","body","toLowerCase","appId","deviceToken","getDeviceToken","response","fetch","method","headers","JSON","stringify","catch","error","ok","statusInfo","statusText","status","undefined","text","expoPushToken","getExpoPushToken","parseResponse","console","debug","e","warn","data","json","getInstallationIdAsync","OS","notificationServiceEnvironment","getIosPushNotificationServiceEnvironmentAsync"],"sourceRoot":"","sources":["../src/getExpoPushTokenAsync.ts"],"sourcesContent":["import * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\ninterface Options {\n  // Endpoint URL override\n  baseUrl?: string;\n\n  // Request URL override\n  url?: string;\n\n  // Request body overrides\n  type?: string;\n  deviceId?: string;\n  development?: boolean;\n  experienceId?: string;\n  projectId?: string;\n  applicationId?: string;\n  devicePushToken?: DevicePushToken;\n}\n\nexport default async function getExpoPushTokenAsync(options: Options = {}): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n\n  const experienceId =\n    options.experienceId || Constants.expoConfig?.originalFullName || Constants.manifest?.id;\n\n  const projectId =\n    options.projectId ||\n    Constants.manifest2?.extra?.eas?.projectId ||\n    Constants.manifest?.projectId;\n\n  if (!experienceId && !projectId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId: deviceId.toLowerCase(),\n    development,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n    ...(projectId ? { projectId } : { experienceId }),\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch((error) => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}