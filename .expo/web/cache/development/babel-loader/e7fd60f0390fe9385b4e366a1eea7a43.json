{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Blob = require(\"./Blob\");\nvar BlobRegistry = require(\"./BlobRegistry\");\nimport NativeBlobModule from \"./NativeBlobModule\";\nimport invariant from 'invariant';\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction createBlobCollector(blobId) {\n  if (global.__blobCollectorProvider == null) {\n    return null;\n  } else {\n    return global.__blobCollectorProvider(blobId);\n  }\n}\n\nvar BlobManager = function () {\n  function BlobManager() {\n    _classCallCheck(this, BlobManager);\n  }\n  _createClass(BlobManager, null, [{\n    key: \"createFromParts\",\n    value:\n\n    function createFromParts(parts, options) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      var blobId = uuidv4();\n      var items = parts.map(function (part) {\n        if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {\n          throw new Error(\"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\");\n        }\n        if (part instanceof Blob) {\n          return {\n            data: part.data,\n            type: 'blob'\n          };\n        } else {\n          return {\n            data: String(part),\n            type: 'string'\n          };\n        }\n      });\n      var size = items.reduce(function (acc, curr) {\n        if (curr.type === 'string') {\n          return acc + global.unescape(encodeURI(curr.data)).length;\n        } else {\n          return acc + curr.data.size;\n        }\n      }, 0);\n      NativeBlobModule.createFromParts(items, blobId);\n      return BlobManager.createFromOptions({\n        blobId: blobId,\n        offset: 0,\n        size: size,\n        type: options ? options.type : '',\n        lastModified: options ? options.lastModified : Date.now()\n      });\n    }\n\n  }, {\n    key: \"createFromOptions\",\n    value:\n    function createFromOptions(options) {\n      BlobRegistry.register(options.blobId);\n      return Object.assign(Object.create(Blob.prototype), {\n        data:\n        options.__collector == null ? _objectSpread(_objectSpread({}, options), {}, {\n          __collector: createBlobCollector(options.blobId)\n        }) : options\n      });\n    }\n\n  }, {\n    key: \"release\",\n    value:\n    function release(blobId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      BlobRegistry.unregister(blobId);\n      if (BlobRegistry.has(blobId)) {\n        return;\n      }\n      NativeBlobModule.release(blobId);\n    }\n\n  }, {\n    key: \"addNetworkingHandler\",\n    value:\n    function addNetworkingHandler() {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.addNetworkingHandler();\n    }\n\n  }, {\n    key: \"addWebSocketHandler\",\n    value:\n    function addWebSocketHandler(socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.addWebSocketHandler(socketId);\n    }\n\n  }, {\n    key: \"removeWebSocketHandler\",\n    value:\n    function removeWebSocketHandler(socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.removeWebSocketHandler(socketId);\n    }\n\n  }, {\n    key: \"sendOverSocket\",\n    value:\n    function sendOverSocket(blob, socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.sendOverSocket(blob.data, socketId);\n    }\n  }]);\n  return BlobManager;\n}();\nBlobManager.isAvailable = !!NativeBlobModule;\nmodule.exports = BlobManager;","map":{"version":3,"names":["Blob","require","BlobRegistry","NativeBlobModule","invariant","uuidv4","replace","c","r","Math","random","v","toString","createBlobCollector","blobId","global","__blobCollectorProvider","BlobManager","parts","options","items","map","part","ArrayBuffer","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromParts","createFromOptions","offset","lastModified","Date","now","register","Object","assign","create","prototype","__collector","unregister","has","release","addNetworkingHandler","socketId","addWebSocketHandler","removeWebSocketHandler","blob","sendOverSocket","isAvailable","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Blob/BlobManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nconst Blob = require('./Blob');\nconst BlobRegistry = require('./BlobRegistry');\n\nimport type {BlobData, BlobOptions, BlobCollector} from './BlobTypes';\nimport NativeBlobModule from './NativeBlobModule';\nimport invariant from 'invariant';\n\n/*eslint-disable no-bitwise */\n/*eslint-disable eqeqeq */\n\n/**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */\nfunction uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// **Temporary workaround**\n// TODO(#24654): Use turbomodules for the Blob module.\n// Blob collector is a jsi::HostObject that is used by native to know\n// when the a Blob instance is deallocated. This allows to free the\n// underlying native resources. This is a hack to workaround the fact\n// that the current bridge infra doesn't allow to track js objects\n// deallocation. Ideally the whole Blob object should be a jsi::HostObject.\nfunction createBlobCollector(blobId: string): BlobCollector | null {\n  if (global.__blobCollectorProvider == null) {\n    return null;\n  } else {\n    return global.__blobCollectorProvider(blobId);\n  }\n}\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable: boolean = !!NativeBlobModule;\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): Blob {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    const blobId = uuidv4();\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\n      ) {\n        throw new Error(\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\n        );\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n    const size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n\n    NativeBlobModule.createFromParts(items, blobId);\n\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now(),\n    });\n  }\n\n  /**\n   * Create blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    BlobRegistry.register(options.blobId);\n    return Object.assign(Object.create(Blob.prototype), {\n      data:\n        // Reuse the collector instance when creating from an existing blob.\n        // This will make sure that the underlying resource is only deallocated\n        // when all blobs that refer to it are deallocated.\n        options.__collector == null\n          ? {\n              ...options,\n              __collector: createBlobCollector(options.blobId),\n            }\n          : options,\n    });\n  }\n\n  /**\n   * Deallocate resources for a blob.\n   */\n  static release(blobId: string): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    BlobRegistry.unregister(blobId);\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n    NativeBlobModule.release(blobId);\n  }\n\n  /**\n   * Inject the blob content handler in the networking module to support blob\n   * requests and responses.\n   */\n  static addNetworkingHandler(): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.addNetworkingHandler();\n  }\n\n  /**\n   * Indicate the websocket should return a blob for incoming binary\n   * messages.\n   */\n  static addWebSocketHandler(socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.addWebSocketHandler(socketId);\n  }\n\n  /**\n   * Indicate the websocket should no longer return a blob for incoming\n   * binary messages.\n   */\n  static removeWebSocketHandler(socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.removeWebSocketHandler(socketId);\n  }\n\n  /**\n   * Send a blob message to a websocket.\n   */\n  static sendOverSocket(blob: Blob, socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.sendOverSocket(blob.data, socketId);\n  }\n}\n\nmodule.exports = BlobManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}