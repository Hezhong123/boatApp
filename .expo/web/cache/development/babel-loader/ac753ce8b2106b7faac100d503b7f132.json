{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport isRecordEqual from \"./isRecordEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport PreventRemoveProvider from \"./PreventRemoveProvider\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\n\nPrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = _objectWithoutProperties(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state =\n  isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    })))\n    .filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = useChildListeners(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(function (children) {\n    return React.createElement(NavigationHelpersContext.Provider, {\n      value: navigation\n    }, React.createElement(PreventRemoveProvider, null, children));\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}