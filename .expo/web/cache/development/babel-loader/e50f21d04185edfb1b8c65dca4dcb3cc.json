{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from \"./useNavigation\";\nimport usePreventRemoveContext from \"./usePreventRemoveContext\";\nimport useRoute from \"./useRoute\";\n\nexport default function usePreventRemove(preventRemove, callback) {\n  var _React$useState = React.useState(function () {\n      return nanoid();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    id = _React$useState2[0];\n  var navigation = useNavigation();\n  var _useRoute = useRoute(),\n    routeKey = _useRoute.key;\n  var _usePreventRemoveCont = usePreventRemoveContext(),\n    setPreventRemove = _usePreventRemoveCont.setPreventRemove;\n  React.useEffect(function () {\n    setPreventRemove(id, routeKey, preventRemove);\n    return function () {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  var beforeRemoveListener = useLatestCallback(function (e) {\n    if (!preventRemove) {\n      return;\n    }\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener);\n  }, [navigation, beforeRemoveListener]);\n}","map":{"version":3,"mappings":";AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAGA,OAAOC,aAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,QAAP;;AAQA,eAAe,SAASC,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;EACA,sBAAaP,KAAK,CAACQ,QAAN,CAAe;MAAA,OAAMT,MAAM,EAA3B;IAAA,EAAb;IAAA;IAAOU,EAAD;EAEN,IAAMC,UAAU,GAAGR,aAAa,EAAhC;EACA,gBAA0BE,QAAQ,EAAlC;IAAaO,qBAALC,GAAG;EAEX,4BAA6BT,uBAAuB,EAApD;IAAQU;EAERb,KAAK,CAACc,SAAN,CAAgB,YAAM;IACpBD,gBAAgB,CAACJ,EAAD,EAAKE,QAAL,EAAeL,aAAf,CAAhB;IACA,OAAO,YAAM;MACXO,gBAAgB,CAACJ,EAAD,EAAKE,QAAL,EAAe,KAAf,CAAhB;IACD,CAFD;EAGD,CALD,EAKG,CAACE,gBAAD,EAAmBJ,EAAnB,EAAuBE,QAAvB,EAAiCL,aAAjC,CALH;EAOA,IAAMS,oBAAoB,GAAGd,iBAAiB,CAE3Ce,WAAD,EAAO;IACP,IAAI,CAACV,aAAL,EAAoB;MAClB;IACD;IAEDU,CAAC,CAACC,cAAF;IAEAV,QAAQ,CAAC;MAAEW,IAAI,EAAEF,CAAC,CAACE;IAAV,CAAD,CAAR;EACD,CAV6C,CAA9C;EAYAlB,KAAK,CAACc,SAAN,CACE;IAAA,OAAMJ,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAES,WAAZ,CAAwB,cAAxB,EAAwCJ,oBAAxC,CADR;EAAA,GAEE,CAACL,UAAD,EAAaK,oBAAb,CAFF;AAID","names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","useState","id","navigation","routeKey","key","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"sources":["usePreventRemove.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}