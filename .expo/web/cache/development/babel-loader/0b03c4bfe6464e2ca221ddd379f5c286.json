{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, Platform } from 'expo-modules-core';\nfunction convertPermissionStatus(status) {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n  }\n}\nfunction resolvePermissionAsync(_x) {\n  return _resolvePermissionAsync.apply(this, arguments);\n}\nfunction _resolvePermissionAsync() {\n  _resolvePermissionAsync = _asyncToGenerator(function* (_ref) {\n    var _navigator, _navigator$permission;\n    var shouldAsk = _ref.shouldAsk;\n    if (!Platform.isDOMAvailable) {\n      return convertPermissionStatus('denied');\n    }\n    var _window = window,\n      _window$Notification = _window.Notification,\n      Notification = _window$Notification === void 0 ? {} : _window$Notification;\n    if (typeof Notification.requestPermission !== 'undefined') {\n      var status = Notification.permission;\n      if (shouldAsk) {\n        status = yield new Promise(function (resolve, reject) {\n          var _Notification$request, _Notification$request2;\n          var resolved = false;\n          function resolveOnce(status) {\n            if (!resolved) {\n              resolved = true;\n              resolve(status);\n            }\n          }\n          (_Notification$request = Notification.requestPermission(resolveOnce)) == null ? void 0 : (_Notification$request2 = _Notification$request.then(resolveOnce)) == null ? void 0 : _Notification$request2.catch(reject);\n        });\n      }\n      return convertPermissionStatus(status);\n    } else if (typeof navigator !== 'undefined' && (_navigator = navigator) != null && (_navigator$permission = _navigator.permissions) != null && _navigator$permission.query) {\n      var query = yield navigator.permissions.query({\n        name: 'notifications'\n      });\n      return convertPermissionStatus(query.state);\n    }\n    return convertPermissionStatus('denied');\n  });\n  return _resolvePermissionAsync.apply(this, arguments);\n}\nexport default {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getPermissionsAsync: function () {\n    var _getPermissionsAsync = _asyncToGenerator(function* () {\n      return resolvePermissionAsync({\n        shouldAsk: false\n      });\n    });\n    function getPermissionsAsync() {\n      return _getPermissionsAsync.apply(this, arguments);\n    }\n    return getPermissionsAsync;\n  }(),\n  requestPermissionsAsync: function () {\n    var _requestPermissionsAsync = _asyncToGenerator(function* (request) {\n      return resolvePermissionAsync({\n        shouldAsk: true\n      });\n    });\n    function requestPermissionsAsync(_x2) {\n      return _requestPermissionsAsync.apply(this, arguments);\n    }\n    return requestPermissionsAsync;\n  }()\n};","map":{"version":3,"mappings":";AAAA,SAASA,gBAAgB,EAAEC,QAAQ,QAAQ,mBAAmB;AAQ9D,SAASC,uBAAuB,CAC9BC,MAA0C;EAE1C,QAAQA,MAAM;IACZ,KAAK,SAAS;MACZ,OAAO;QACLA,MAAM,EAAEH,gBAAgB,CAACI,OAAO;QAChCC,OAAO,EAAE,OAAO;QAChBC,WAAW,EAAE,KAAK;QAClBC,OAAO,EAAE;OACV;IACH,KAAK,QAAQ;MACX,OAAO;QACLJ,MAAM,EAAEH,gBAAgB,CAACQ,MAAM;QAC/BH,OAAO,EAAE,OAAO;QAChBC,WAAW,EAAE,KAAK;QAClBC,OAAO,EAAE;OACV;IACH;MACE,OAAO;QACLJ,MAAM,EAAEH,gBAAgB,CAACS,YAAY;QACrCJ,OAAO,EAAE,OAAO;QAChBC,WAAW,EAAE,IAAI;QACjBC,OAAO,EAAE;OACV;EAAC;AAER;AAAC,SAEcG,sBAAsB;EAAA;AAAA;AAAA;EAAA,4CAArC,iBAIC;IAAA;IAAA,IAHCC,SAAS,QAATA,SAAS;IAIT,IAAI,CAACV,QAAQ,CAACW,cAAc,EAAE;MAC5B,OAAOV,uBAAuB,CAAC,QAAQ,CAAC;;IAG1C,cAA8BW,MAAa;MAAA,+BAAnCC,YAAY;MAAZA,YAAY,qCAAG,EAAE;IACzB,IAAI,OAAOA,YAAY,CAACC,iBAAiB,KAAK,WAAW,EAAE;MACzD,IAAIZ,MAAM,GAAGW,YAAY,CAACE,UAAU;MACpC,IAAIL,SAAS,EAAE;QACbR,MAAM,SAAS,IAAIc,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAI;UAAA;UAC7C,IAAIC,QAAQ,GAAG,KAAK;UACpB,SAASC,WAAW,CAAClB,MAAc;YACjC,IAAI,CAACiB,QAAQ,EAAE;cACbA,QAAQ,GAAG,IAAI;cACfF,OAAO,CAACf,MAAM,CAAC;;UAEnB;UAEA,qCAAY,CAACY,iBAAiB,CAACM,WAAW,CAAC,+CAA3C,sBAA6CC,IAAI,CAACD,WAAW,CAAC,qBAA9D,uBAAgEE,KAAK,CAACJ,MAAM,CAAC;QAC/E,CAAC,CAAC;;MAEJ,OAAOjB,uBAAuB,CAACC,MAAM,CAAC;KACvC,MAAM,IAAI,OAAOqB,SAAS,KAAK,WAAW,kBAAIA,SAAS,sCAAT,WAAWC,WAAW,aAAtB,sBAAwBC,KAAK,EAAE;MAE5E,IAAMA,KAAK,SAASF,SAAS,CAACC,WAAW,CAACC,KAAK,CAAC;QAAEC,IAAI,EAAE;MAAe,CAAE,CAAC;MAC1E,OAAOzB,uBAAuB,CAACwB,KAAK,CAACE,KAAK,CAAC;;IAG7C,OAAO1B,uBAAuB,CAAC,QAAQ,CAAC;EAC1C,CAAC;EAAA;AAAA;AAED,eAAe;EACb2B,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrBC,eAAe,EAAE,2BAAK,CAAE,CAAC;EACnBC,mBAAmB;IAAA;MACvB,OAAOrB,sBAAsB,CAAC;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;IACrD,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACKqB,uBAAuB;IAAA,4DAC3BC,OAA6C;MAE7C,OAAOvB,sBAAsB,CAAC;QAAEC,SAAS,EAAE;MAAI,CAAE,CAAC;IACpD,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;CAC+B","names":["PermissionStatus","Platform","convertPermissionStatus","status","GRANTED","expires","canAskAgain","granted","DENIED","UNDETERMINED","resolvePermissionAsync","shouldAsk","isDOMAvailable","window","Notification","requestPermission","permission","Promise","resolve","reject","resolved","resolveOnce","then","catch","navigator","permissions","query","name","state","addListener","removeListeners","getPermissionsAsync","requestPermissionsAsync","request"],"sourceRoot":"","sources":["../src/NotificationPermissionsModule.ts"],"sourcesContent":["import { PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  NativeNotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport { NotificationPermissionsModule } from './NotificationPermissionsModule.types';\n\nfunction convertPermissionStatus(\n  status?: NotificationPermission | 'prompt'\n): NotificationPermissionsStatus {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true,\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false,\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n  }\n}\n\nasync function resolvePermissionAsync({\n  shouldAsk,\n}: {\n  shouldAsk: boolean;\n}): Promise<NotificationPermissionsStatus> {\n  if (!Platform.isDOMAvailable) {\n    return convertPermissionStatus('denied');\n  }\n\n  const { Notification = {} } = window as any;\n  if (typeof Notification.requestPermission !== 'undefined') {\n    let status = Notification.permission;\n    if (shouldAsk) {\n      status = await new Promise((resolve, reject) => {\n        let resolved = false;\n        function resolveOnce(status: string) {\n          if (!resolved) {\n            resolved = true;\n            resolve(status);\n          }\n        }\n        // Some browsers require a callback argument and some return a Promise\n        Notification.requestPermission(resolveOnce)?.then(resolveOnce)?.catch(reject);\n      });\n    }\n    return convertPermissionStatus(status);\n  } else if (typeof navigator !== 'undefined' && navigator?.permissions?.query) {\n    // TODO(Bacon): Support `push` in the future when it's stable.\n    const query = await navigator.permissions.query({ name: 'notifications' });\n    return convertPermissionStatus(query.state);\n  }\n  // Platforms like iOS Safari don't support Notifications so return denied.\n  return convertPermissionStatus('denied');\n}\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  async getPermissionsAsync(): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: false });\n  },\n  async requestPermissionsAsync(\n    request: NativeNotificationPermissionsRequest\n  ): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: true });\n  },\n} as NotificationPermissionsModule;\n"]},"metadata":{},"sourceType":"module"}