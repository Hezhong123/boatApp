{"ast":null,"code":"\n\n'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _EventSubscription from \"./_EventSubscription\";\nvar EmitterSubscription = function (_EventSubscription2) {\n  _inherits(EmitterSubscription, _EventSubscription2);\n  var _super = _createSuper(EmitterSubscription);\n  function EmitterSubscription(emitter, subscriber, listener, context) {\n    var _this;\n    _classCallCheck(this, EmitterSubscription);\n    _this = _super.call(this, subscriber);\n    _this.emitter = emitter;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n\n  _createClass(EmitterSubscription, [{\n    key: \"remove\",\n    value:\n    function remove() {\n      this.emitter.__removeSubscription(this);\n    }\n  }]);\n  return EmitterSubscription;\n}(_EventSubscription);\nmodule.exports = EmitterSubscription;","map":{"version":3,"names":["_EventSubscription","EmitterSubscription","emitter","subscriber","listener","context","__removeSubscription","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/vendor/emitter/_EmitterSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type EventEmitter from './EventEmitter';\nimport _EventSubscription from './_EventSubscription';\nimport type EventSubscriptionVendor from './_EventSubscriptionVendor';\nimport type {EventSubscription} from './EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription<EventDefinitions: {...}, K: $Keys<EventDefinitions>>\n  extends _EventSubscription<EventDefinitions, K>\n  implements EventSubscription\n{\n  emitter: EventEmitter<EventDefinitions>;\n  listener: ?(...$ElementType<EventDefinitions, K>) => mixed;\n  context: ?$FlowFixMe;\n\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(\n    emitter: EventEmitter<EventDefinitions>,\n    subscriber: EventSubscriptionVendor<EventDefinitions>,\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n    context: ?$FlowFixMe,\n  ) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  remove(): void {\n    this.emitter.__removeSubscription(this);\n  }\n}\n\nmodule.exports = EmitterSubscription;\n"],"mappings":";;AAUA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGb,OAAOA,kBAAkB;AAA6B,IAOhDC,mBAAmB;EAAA;EAAA;EAkBvB,6BACEC,OAAuC,EACvCC,UAAqD,EACrDC,QAAyD,EACzDC,OAAoB,EACpB;IAAA;IAAA;IACA,0BAAMF,UAAU;IAChB,MAAKD,OAAO,GAAGA,OAAO;IACtB,MAAKE,QAAQ,GAAGA,QAAQ;IACxB,MAAKC,OAAO,GAAGA,OAAO;IAAC;EACzB;;EAAC;IAAA;IAAA;IAQD,kBAAe;MACb,IAAI,CAACH,OAAO,CAACI,oBAAoB,CAAC,IAAI,CAAC;IACzC;EAAC;EAAA;AAAA,EArCON,kBAAkB;AAwC5BO,MAAM,CAACC,OAAO,GAAGP,mBAAmB"},"metadata":{},"sourceType":"module"}