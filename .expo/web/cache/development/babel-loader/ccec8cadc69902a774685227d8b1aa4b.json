{"ast":null,"code":"import * as React from 'react';\n\nexport default function useChildListeners() {\n  var _React$useRef = React.useRef({\n      action: [],\n      focus: []\n    }),\n    listeners = _React$useRef.current;\n  var addListener = React.useCallback(function (type, listener) {\n    listeners[type].push(listener);\n    var removed = false;\n    return function () {\n      var index = listeners[type].indexOf(listener);\n      if (!removed && index > -1) {\n        removed = true;\n        listeners[type].splice(index, 1);\n      }\n    };\n  }, [listeners]);\n  return {\n    listeners: listeners,\n    addListener: addListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAOA,eAAe,SAASC,iBAAT,GAA6B;EAC1C,oBAA+BD,KAAK,CAACE,MAAN,CAE5B;MACDC,MAAM,EAAE,EADP;MAEDC,KAAK,EAAE;IAFN,CAF4B,CAA/B;IAAiBC,0BAATC,OAAO;EAOf,IAAMC,WAAW,GAAGP,KAAK,CAACQ,WAAN,CAClB,UAA8BC,IAA9B,EAAuCC,QAAvC,EAAoE;IAClEL,SAAS,CAACI,IAAD,CAAT,CAAgBE,IAAhB,CAAqBD,QAArB;IAEA,IAAIE,OAAO,GAAG,KAAd;IACA,OAAO,YAAM;MACX,IAAMC,KAAK,GAAGR,SAAS,CAACI,IAAD,CAAT,CAAgBK,OAAhB,CAAwBJ,QAAxB,CAAd;MAEA,IAAI,CAACE,OAAD,IAAYC,KAAK,GAAG,CAAC,CAAzB,EAA4B;QAC1BD,OAAO,GAAG,IAAV;QACAP,SAAS,CAACI,IAAD,CAAT,CAAgBM,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;MACD;IACF,CAPD;EAQD,CAbiB,EAclB,CAACR,SAAD,CAdkB,CAApB;EAiBA,OAAO;IACLA,SADK,EACLA,SADK;IAELE;EAFK,CAAP;AAID","names":["React","useChildListeners","useRef","action","focus","listeners","current","addListener","useCallback","type","listener","push","removed","index","indexOf","splice"],"sources":["useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}