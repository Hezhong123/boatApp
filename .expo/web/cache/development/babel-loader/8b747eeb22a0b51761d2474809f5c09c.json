{"ast":null,"code":"\n\n'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar PixelRatio = require(\"../Utilities/PixelRatio\");\nvar ReactNativeStyleAttributes = require(\"../Components/View/ReactNativeStyleAttributes\");\nvar flatten = require(\"./flattenStyle\");\nvar hairlineWidth = PixelRatio.roundToNearestPixel(0.4);\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / PixelRatio.get();\n}\nvar absoluteFill = {\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0\n};\nif (__DEV__) {\n  Object.freeze(absoluteFill);\n}\n\nmodule.exports = {\n  hairlineWidth: hairlineWidth,\n  absoluteFill: absoluteFill,\n\n  absoluteFillObject: absoluteFill,\n  compose: function compose(style1, style2) {\n    if (style1 != null && style2 != null) {\n      return [style1, style2];\n    } else {\n      return style1 != null ? style1 : style2;\n    }\n  },\n  flatten: flatten,\n  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {\n    var value;\n    if (ReactNativeStyleAttributes[property] === true) {\n      value = {\n        process: process\n      };\n    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {\n      value = _objectSpread(_objectSpread({}, ReactNativeStyleAttributes[property]), {}, {\n        process: process\n      });\n    } else {\n      console.error(property + \" is not a valid style attribute\");\n      return;\n    }\n    if (__DEV__ && typeof value.process === 'function') {\n      console.warn(\"Overwriting \" + property + \" style attribute preprocessor\");\n    }\n    ReactNativeStyleAttributes[property] = value;\n  },\n  create: function create(obj) {\n    if (__DEV__) {\n      for (var _key in obj) {\n        if (obj[_key]) {\n          Object.freeze(obj[_key]);\n        }\n      }\n    }\n    return obj;\n  }\n};","map":{"version":3,"names":["PixelRatio","require","ReactNativeStyleAttributes","flatten","hairlineWidth","roundToNearestPixel","get","absoluteFill","position","left","right","top","bottom","__DEV__","Object","freeze","module","exports","absoluteFillObject","compose","style1","style2","setStyleAttributePreprocessor","property","process","value","console","error","warn","create","obj","key"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');\n\nconst flatten = require('./flattenStyle');\n\nimport type {\n  ____ColorValue_Internal,\n  ____Styles_Internal,\n  ____DangerouslyImpreciseStyle_Internal,\n  ____DangerouslyImpreciseStyleProp_Internal,\n  ____ViewStyle_Internal,\n  ____ViewStyleProp_Internal,\n  ____TextStyle_Internal,\n  ____TextStyleProp_Internal,\n  ____ImageStyle_Internal,\n  ____ImageStyleProp_Internal,\n} from './StyleSheetTypes';\n\n/**\n * This type should be used as the type for anything that is a color. It is\n * most useful when using DynamicColorIOS which can be a string or a dynamic\n * color object.\n *\n * type props = {backgroundColor: ColorValue};\n */\nexport type ColorValue = ____ColorValue_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <View>'s `style` prop. This ensures call sites of the component\n * can't pass styles that View doesn't support such as `fontSize`.`\n *\n * type Props = {style: ViewStyleProp}\n * const MyComponent = (props: Props) => <View style={props.style} />\n */\nexport type ViewStyleProp = ____ViewStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <Text>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Text doesn't support such as `resizeMode`.`\n *\n * type Props = {style: TextStyleProp}\n * const MyComponent = (props: Props) => <Text style={props.style} />\n */\nexport type TextStyleProp = ____TextStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to an <Image>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Image doesn't support such as `fontSize`.`\n *\n * type Props = {style: ImageStyleProp}\n * const MyComponent = (props: Props) => <Image style={props.style} />\n */\nexport type ImageStyleProp = ____ImageStyleProp_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type\n * is similar to the ones above except it allows styles that are accepted\n * by all of View, Text, or Image. It is therefore very unsafe to pass this\n * through to an underlying component. Using this is almost always a mistake\n * and using one of the other more restrictive types is likely the right choice.\n */\nexport type DangerouslyImpreciseStyleProp =\n  ____DangerouslyImpreciseStyleProp_Internal;\n\n/**\n * Utility type for getting the values for specific style keys.\n *\n * The following is bad because position is more restrictive than 'string':\n * ```\n * type Props = {position: string};\n * ```\n *\n * You should use the following instead:\n *\n * ```\n * type Props = {position: TypeForStyleKey<'position'>};\n * ```\n *\n * This will correctly give you the type 'absolute' | 'relative'\n */\nexport type TypeForStyleKey<\n  +key: $Keys<____DangerouslyImpreciseStyle_Internal>,\n> = $ElementType<____DangerouslyImpreciseStyle_Internal, key>;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for View.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ViewStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a View that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ViewStyle = ____ViewStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Text.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using TextStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a Text that can't be precomputed with\n * StyleSheet.create.\n */\nexport type TextStyle = ____TextStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Image.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ImageStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to an Image that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ImageStyle = ____ImageStyle_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type is an object\n * with all possible style keys and their values. Note that this isn't\n * a safe way to type a style prop for a component as results from\n * StyleSheet.create return an internal identifier, not an object of styles.\n *\n * If you want to type the style prop of a function, consider using\n * ViewStyleProp, TextStyleProp, or ImageStyleProp.\n *\n * This should only be used by very core utilities that operate on an object\n * containing any possible style value.\n */\nexport type DangerouslyImpreciseStyle = ____DangerouslyImpreciseStyle_Internal;\n\nlet hairlineWidth: number = PixelRatio.roundToNearestPixel(0.4);\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / PixelRatio.get();\n}\n\nconst absoluteFill = {\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n};\nif (__DEV__) {\n  Object.freeze(absoluteFill);\n}\n\n/**\n * A StyleSheet is an abstraction similar to CSS StyleSheets\n *\n * Create a new StyleSheet:\n *\n * ```\n * const styles = StyleSheet.create({\n *   container: {\n *     borderRadius: 4,\n *     borderWidth: 0.5,\n *     borderColor: '#d6d7da',\n *   },\n *   title: {\n *     fontSize: 19,\n *     fontWeight: 'bold',\n *   },\n *   activeTitle: {\n *     color: 'red',\n *   },\n * });\n * ```\n *\n * Use a StyleSheet:\n *\n * ```\n * <View style={styles.container}>\n *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />\n * </View>\n * ```\n *\n * Code quality:\n *\n *  - By moving styles away from the render function, you're making the code\n *  easier to understand.\n *  - Naming the styles is a good way to add meaning to the low level components\n *  in the render function.\n *\n * Performance:\n *\n *  - Making a stylesheet from a style object makes it possible to refer to it\n * by ID instead of creating a new style object every time.\n *  - It also allows to send the style only once through the bridge. All\n * subsequent uses are going to refer an id (not implemented yet).\n */\nmodule.exports = {\n  /**\n   * This is defined as the width of a thin line on the platform. It can be\n   * used as the thickness of a border or division between two elements.\n   * Example:\n   * ```\n   *   {\n   *     borderBottomColor: '#bbb',\n   *     borderBottomWidth: StyleSheet.hairlineWidth\n   *   }\n   * ```\n   *\n   * This constant will always be a round number of pixels (so a line defined\n   * by it look crisp) and will try to match the standard width of a thin line\n   * on the underlying platform. However, you should not rely on it being a\n   * constant size, because on different platforms and screen densities its\n   * value may be calculated differently.\n   *\n   * A line with hairline width may not be visible if your simulator is downscaled.\n   */\n  hairlineWidth,\n\n  /**\n   * A very common pattern is to create overlays with position absolute and zero positioning,\n   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated\n   * styles.\n   */\n  absoluteFill: (absoluteFill: any), // TODO: This should be updated after we fix downstream Flow sites.\n\n  /**\n   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be\n   * used to create a customized entry in a `StyleSheet`, e.g.:\n   *\n   *   const styles = StyleSheet.create({\n   *     wrapper: {\n   *       ...StyleSheet.absoluteFillObject,\n   *       top: 10,\n   *       backgroundColor: 'transparent',\n   *     },\n   *   });\n   */\n  absoluteFillObject: absoluteFill,\n\n  /**\n   * Combines two styles such that `style2` will override any styles in `style1`.\n   * If either style is falsy, the other one is returned without allocating an\n   * array, saving allocations and maintaining reference equality for\n   * PureComponent checks.\n   */\n  compose<T: DangerouslyImpreciseStyleProp>(\n    style1: ?T,\n    style2: ?T,\n  ): ?T | $ReadOnlyArray<T> {\n    if (style1 != null && style2 != null) {\n      return ([style1, style2]: $ReadOnlyArray<T>);\n    } else {\n      return style1 != null ? style1 : style2;\n    }\n  },\n\n  /**\n   * Flattens an array of style objects, into one aggregated style object.\n   * Alternatively, this method can be used to lookup IDs, returned by\n   * StyleSheet.register.\n   *\n   * > **NOTE**: Exercise caution as abusing this can tax you in terms of\n   * > optimizations.\n   * >\n   * > IDs enable optimizations through the bridge and memory in general. Referring\n   * > to style objects directly will deprive you of these optimizations.\n   *\n   * Example:\n   * ```\n   * const styles = StyleSheet.create({\n   *   listItem: {\n   *     flex: 1,\n   *     fontSize: 16,\n   *     color: 'white'\n   *   },\n   *   selectedListItem: {\n   *     color: 'green'\n   *   }\n   * });\n   *\n   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n   * // returns { flex: 1, fontSize: 16, color: 'green' }\n   * ```\n   * Alternative use:\n   * ```\n   * StyleSheet.flatten(styles.listItem);\n   * // return { flex: 1, fontSize: 16, color: 'white' }\n   * // Simply styles.listItem would return its ID (number)\n   * ```\n   * This method internally uses `StyleSheetRegistry.getStyleByID(style)`\n   * to resolve style objects represented by IDs. Thus, an array of style\n   * objects (instances of StyleSheet.create), are individually resolved to,\n   * their respective objects, merged as one and then returned. This also explains\n   * the alternative use.\n   */\n  flatten,\n\n  /**\n   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will\n   * not be reliably announced. The whole thing might be deleted, who knows? Use\n   * at your own risk.\n   *\n   * Sets a function to use to pre-process a style property value. This is used\n   * internally to process color and transform values. You should not use this\n   * unless you really know what you are doing and have exhausted other options.\n   */\n  setStyleAttributePreprocessor(\n    property: string,\n    process: (nextProp: mixed) => mixed,\n  ) {\n    let value;\n\n    if (ReactNativeStyleAttributes[property] === true) {\n      value = {process};\n    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {\n      value = {...ReactNativeStyleAttributes[property], process};\n    } else {\n      console.error(`${property} is not a valid style attribute`);\n      return;\n    }\n\n    if (__DEV__ && typeof value.process === 'function') {\n      console.warn(`Overwriting ${property} style attribute preprocessor`);\n    }\n\n    ReactNativeStyleAttributes[property] = value;\n  },\n\n  /**\n   * Creates a StyleSheet style reference from the given object.\n   */\n  create<+S: ____Styles_Internal>(obj: S): $ReadOnly<S> {\n    // TODO: This should return S as the return type. But first,\n    // we need to codemod all the callsites that are typing this\n    // return value as a number (even though it was opaque).\n    if (__DEV__) {\n      for (const key in obj) {\n        if (obj[key]) {\n          Object.freeze(obj[key]);\n        }\n      }\n    }\n    return obj;\n  },\n};\n"],"mappings":";;AAUA,YAAY;;AAAC;AAAA;AAAA;AAEb,IAAMA,UAAU,GAAGC,OAAO,2BAA2B;AACrD,IAAMC,0BAA0B,GAAGD,OAAO,iDAAiD;AAE3F,IAAME,OAAO,GAAGF,OAAO,kBAAkB;AAqJzC,IAAIG,aAAqB,GAAGJ,UAAU,CAACK,mBAAmB,CAAC,GAAG,CAAC;AAC/D,IAAID,aAAa,KAAK,CAAC,EAAE;EACvBA,aAAa,GAAG,CAAC,GAAGJ,UAAU,CAACM,GAAG,EAAE;AACtC;AAEA,IAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,MAAM,EAAE;AACV,CAAC;AACD,IAAIC,OAAO,EAAE;EACXC,MAAM,CAACC,MAAM,CAACR,YAAY,CAAC;AAC7B;;AA8CAS,MAAM,CAACC,OAAO,GAAG;EAoBfb,aAAa,EAAbA,aAAa;EAObG,YAAY,EAAGA,YAAkB;;EAcjCW,kBAAkB,EAAEX,YAAY;EAQhCY,OAAO,mBACLC,MAAU,EACVC,MAAU,EACc;IACxB,IAAID,MAAM,IAAI,IAAI,IAAIC,MAAM,IAAI,IAAI,EAAE;MACpC,OAAQ,CAACD,MAAM,EAAEC,MAAM,CAAC;IAC1B,CAAC,MAAM;MACL,OAAOD,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAGC,MAAM;IACzC;EACF,CAAC;EAyCDlB,OAAO,EAAPA,OAAO;EAWPmB,6BAA6B,yCAC3BC,QAAgB,EAChBC,OAAmC,EACnC;IACA,IAAIC,KAAK;IAET,IAAIvB,0BAA0B,CAACqB,QAAQ,CAAC,KAAK,IAAI,EAAE;MACjDE,KAAK,GAAG;QAACD,OAAO,EAAPA;MAAO,CAAC;IACnB,CAAC,MAAM,IAAI,OAAOtB,0BAA0B,CAACqB,QAAQ,CAAC,KAAK,QAAQ,EAAE;MACnEE,KAAK,mCAAOvB,0BAA0B,CAACqB,QAAQ,CAAC;QAAEC,OAAO,EAAPA;MAAO,EAAC;IAC5D,CAAC,MAAM;MACLE,OAAO,CAACC,KAAK,CAAIJ,QAAQ,qCAAkC;MAC3D;IACF;IAEA,IAAIV,OAAO,IAAI,OAAOY,KAAK,CAACD,OAAO,KAAK,UAAU,EAAE;MAClDE,OAAO,CAACE,IAAI,kBAAgBL,QAAQ,mCAAgC;IACtE;IAEArB,0BAA0B,CAACqB,QAAQ,CAAC,GAAGE,KAAK;EAC9C,CAAC;EAKDI,MAAM,kBAA0BC,GAAM,EAAgB;IAIpD,IAAIjB,OAAO,EAAE;MACX,KAAK,IAAMkB,IAAG,IAAID,GAAG,EAAE;QACrB,IAAIA,GAAG,CAACC,IAAG,CAAC,EAAE;UACZjB,MAAM,CAACC,MAAM,CAACe,GAAG,CAACC,IAAG,CAAC,CAAC;QACzB;MACF;IACF;IACA,OAAOD,GAAG;EACZ;AACF,CAAC"},"metadata":{},"sourceType":"script"}