{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar DevSettings = require(\"./DevSettings\");\nvar invariant = require('invariant');\nvar MetroHMRClient = require('metro-runtime/src/modules/HMRClient');\nvar Platform = require(\"./Platform\");\nvar prettyFormat = require('pretty-format');\nimport getDevServer from \"../Core/Devtools/getDevServer\";\nimport NativeRedBox from \"../NativeModules/specs/NativeRedBox\";\nimport LogBox from \"../LogBox/LogBox\";\nvar pendingEntryPoints = [];\nvar hmrClient = null;\nvar hmrUnavailableReason = null;\nvar currentCompileErrorMessage = null;\nvar didConnect = false;\nvar pendingLogs = [];\nvar HMRClient = {\n  enable: function enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    var LoadingView = require(\"./LoadingView\");\n\n    hmrClient.send(JSON.stringify({\n      type: 'log-opt-in'\n    }));\n\n    var hasUpdates = hmrClient.hasPendingUpdates();\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    showCompileError();\n  },\n  disable: function disable() {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n  registerBundle: function registerBundle(requestUrl) {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log: function log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(JSON.stringify({\n        type: 'log',\n        level: level,\n        mode: global.RN$Bridgeless === true ? 'NOBRIDGE' : 'BRIDGE',\n        data: data.map(function (item) {\n          return typeof item === 'string' ? item : prettyFormat(item, {\n            escapeString: true,\n            highlight: true,\n            maxDepth: 3,\n            min: true,\n            plugins: [prettyFormat.plugins.ReactElement]\n          });\n        })\n      }));\n    } catch (error) {\n    }\n  },\n  setup: function setup(platform, bundleEntry, host, port, isEnabled) {\n    var scheme = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'http';\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\n    invariant(host, 'Missing required parameter `host`');\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    var LoadingView = require(\"./LoadingView\");\n    var serverHost = port !== null && port !== '' ? host + \":\" + port : host;\n    var serverScheme = scheme;\n    var client = new MetroHMRClient(serverScheme + \"://\" + serverHost + \"/hot\");\n    hmrClient = client;\n    var _getDevServer = getDevServer(),\n      fullBundleUrl = _getDevServer.fullBundleUrl;\n    pendingEntryPoints.push(fullBundleUrl != null ? fullBundleUrl : serverScheme + \"://\" + serverHost + \"/hot?bundleEntry=\" + bundleEntry + \"&platform=\" + platform);\n    client.on('connection-error', function (e) {\n      var error = \"Cannot connect to Metro.\\n\\nTry the following to fix the issue:\\n- Ensure that Metro is running and available on the same network\";\n      if (Platform.OS === 'ios') {\n        error += \"\\n- Ensure that the Metro URL is correctly set in AppDelegate\";\n      } else {\n        error += \"\\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081\";\n      }\n      error += \"\\n\\nURL: \" + host + \":\" + port + \"\\n\\nError: \" + e.message;\n      setHMRUnavailableReason(error);\n    });\n    client.on('update-start', function (_ref) {\n      var isInitialUpdate = _ref.isInitialUpdate;\n      currentCompileErrorMessage = null;\n      didConnect = true;\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n    client.on('update', function (_ref2) {\n      var isInitialUpdate = _ref2.isInitialUpdate;\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox.clearAllLogs();\n      }\n    });\n    client.on('update-done', function () {\n      LoadingView.hide();\n    });\n    client.on('error', function (data) {\n      LoadingView.hide();\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = data.type + \" \" + data.message;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on('close', function (data) {\n      LoadingView.hide();\n      setHMRUnavailableReason('Disconnected from Metro.');\n    });\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs(hmrClient);\n  }\n};\nfunction setHMRUnavailableReason(reason) {\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\n    return;\n  }\n  if (pendingEntryPoints.length > 0) {\n    client.send(JSON.stringify({\n      type: 'register-entrypoints',\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\nfunction flushEarlyLogs(client) {\n  try {\n    pendingLogs.forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        level = _ref4[0],\n        data = _ref4[1];\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\nfunction dismissRedbox() {\n  if (Platform.OS === 'ios' && NativeRedBox != null && NativeRedBox.dismiss != null) {\n    NativeRedBox.dismiss();\n  } else {\n    var NativeExceptionsManager = require(\"../Core/NativeExceptionsManager\").default;\n    NativeExceptionsManager && NativeExceptionsManager.dismissRedbox && NativeExceptionsManager.dismissRedbox();\n  }\n}\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  dismissRedbox();\n  var message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  var error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\nmodule.exports = HMRClient;","map":{"version":3,"names":["DevSettings","require","invariant","MetroHMRClient","Platform","prettyFormat","getDevServer","NativeRedBox","LogBox","pendingEntryPoints","hmrClient","hmrUnavailableReason","currentCompileErrorMessage","didConnect","pendingLogs","HMRClient","enable","Error","LoadingView","send","JSON","stringify","type","hasUpdates","hasPendingUpdates","showMessage","hide","showCompileError","disable","registerBundle","requestUrl","push","registerBundleEntryPoints","log","level","data","length","shift","mode","global","RN$Bridgeless","map","item","escapeString","highlight","maxDepth","min","plugins","ReactElement","error","setup","platform","bundleEntry","host","port","isEnabled","scheme","serverHost","serverScheme","client","fullBundleUrl","on","e","OS","message","setHMRUnavailableReason","isInitialUpdate","dismissRedbox","clearAllLogs","close","flushEarlyLogs","reason","console","warn","reload","entryPoints","forEach","dismiss","NativeExceptionsManager","default","preventSymbolication","module","exports"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nconst DevSettings = require('./DevSettings');\nconst invariant = require('invariant');\nconst MetroHMRClient = require('metro-runtime/src/modules/HMRClient');\nconst Platform = require('./Platform');\nconst prettyFormat = require('pretty-format');\n\nimport getDevServer from '../Core/Devtools/getDevServer';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport LogBox from '../LogBox/LogBox';\nimport type {ExtendedError} from '../Core/ExtendedError';\n\nconst pendingEntryPoints = [];\nlet hmrClient = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nlet pendingLogs: Array<[LogLevel, Array<mixed>]> = [];\n\ntype LogLevel =\n  | 'trace'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'log'\n  | 'group'\n  | 'groupCollapsed'\n  | 'groupEnd'\n  | 'debug';\n\nexport type HMRClientNativeInterface = {|\n  enable(): void,\n  disable(): void,\n  registerBundle(requestUrl: string): void,\n  log(level: LogLevel, data: Array<mixed>): void,\n  setup(\n    platform: string,\n    bundleEntry: string,\n    host: string,\n    port: number | string,\n    isEnabled: boolean,\n    scheme?: string,\n  ): void,\n|};\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient: HMRClientNativeInterface = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    const LoadingView = require('./LoadingView');\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({type: 'log-opt-in'}));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: Array<mixed>) {\n    if (!hmrClient) {\n      // Catch a reasonable number of early logs\n      // in case hmrClient gets initialized later.\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(\n        JSON.stringify({\n          type: 'log',\n          level,\n          mode: global.RN$Bridgeless === true ? 'NOBRIDGE' : 'BRIDGE',\n          data: data.map(item =>\n            typeof item === 'string'\n              ? item\n              : prettyFormat(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [prettyFormat.plugins.ReactElement],\n                }),\n          ),\n        }),\n      );\n    } catch (error) {\n      // If sending logs causes any failures we want to silently ignore them\n      // to ensure we do not cause infinite-logging loops.\n    }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup(\n    platform: string,\n    bundleEntry: string,\n    host: string,\n    port: number | string,\n    isEnabled: boolean,\n    scheme?: string = 'http',\n  ) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\n    invariant(host, 'Missing required parameter `host`');\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    // Moving to top gives errors due to NativeModules not being initialized\n    const LoadingView = require('./LoadingView');\n\n    const serverHost = port !== null && port !== '' ? `${host}:${port}` : host;\n\n    const serverScheme = scheme;\n\n    const client = new MetroHMRClient(`${serverScheme}://${serverHost}/hot`);\n\n    hmrClient = client;\n\n    const {fullBundleUrl} = getDevServer();\n    pendingEntryPoints.push(\n      // HMRServer understands regular bundle URLs, so prefer that in case\n      // there are any important URL parameters we can't reconstruct from\n      // `setup()`'s arguments.\n      fullBundleUrl ??\n        `${serverScheme}://${serverHost}/hot?bundleEntry=${bundleEntry}&platform=${platform}`,\n    );\n\n    client.on('connection-error', e => {\n      let error = `Cannot connect to Metro.\n\nTry the following to fix the issue:\n- Ensure that Metro is running and available on the same network`;\n\n      if (Platform.OS === 'ios') {\n        error += `\n- Ensure that the Metro URL is correctly set in AppDelegate`;\n      } else {\n        error += `\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`;\n      }\n\n      error += `\n\nURL: ${host}:${port}\n\nError: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on('update-start', ({isInitialUpdate}) => {\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n\n    client.on('update', ({isInitialUpdate}) => {\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox.clearAllLogs();\n      }\n    });\n\n    client.on('update-done', () => {\n      LoadingView.hide();\n    });\n\n    client.on('error', data => {\n      LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason(\n          'Metro has restarted since the last edit. Reload to reconnect.',\n        );\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason(\n          'Metro and the client are out of sync. Reload to reconnect.',\n        );\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n\n    client.on('close', data => {\n      LoadingView.hide();\n      setHMRUnavailableReason('Disconnected from Metro.');\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs(hmrClient);\n  },\n};\n\nfunction setHMRUnavailableReason(reason) {\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client.send(\n      JSON.stringify({\n        type: 'register-entrypoints',\n        entryPoints: pendingEntryPoints,\n      }),\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs(client) {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  if (\n    Platform.OS === 'ios' &&\n    NativeRedBox != null &&\n    NativeRedBox.dismiss != null\n  ) {\n    NativeRedBox.dismiss();\n  } else {\n    const NativeExceptionsManager =\n      require('../Core/NativeExceptionsManager').default;\n    NativeExceptionsManager &&\n      NativeExceptionsManager.dismissRedbox &&\n      NativeExceptionsManager.dismissRedbox();\n  }\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  // Even if there is already a redbox, syntax errors are more important.\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\n  dismissRedbox();\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n   * parameters */\n  const error: ExtendedError = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  error.preventSymbolication = true;\n  throw error;\n}\n\nmodule.exports = HMRClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}