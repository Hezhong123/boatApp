{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { PermissionStatus, createPermissionHook, UnavailabilityError, CodedError } from 'expo-modules-core';\nimport ExponentImagePicker from \"./ExponentImagePicker\";\nimport { MediaTypeOptions, VideoExportPreset, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle } from \"./ImagePicker.types\";\nfunction validateOptions(options) {\n  var aspect = options.aspect,\n    quality = options.quality,\n    videoMaxDuration = options.videoMaxDuration;\n  if (aspect != null) {\n    var _aspect = _slicedToArray(aspect, 2),\n      x = _aspect[0],\n      y = _aspect[1];\n    if (x <= 0 || y <= 0) {\n      throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid aspect ratio values \" + x + \":\" + y + \". Provide positive numbers.\");\n    }\n  }\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid 'quality' value \" + quality + \". Provide a value between 0 and 1.\");\n  }\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError('ERR_INVALID_ARGUMENT', \"Invalid 'videoMaxDuration' value \" + videoMaxDuration + \". Provide a non-negative number.\");\n  }\n  return options;\n}\nexport function getCameraPermissionsAsync() {\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _getCameraPermissionsAsync() {\n  _getCameraPermissionsAsync = _asyncToGenerator(function* () {\n    return ExponentImagePicker.getCameraPermissionsAsync();\n  });\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nexport function getCameraRollPermissionsAsync() {\n  return _getCameraRollPermissionsAsync.apply(this, arguments);\n}\nfunction _getCameraRollPermissionsAsync() {\n  _getCameraRollPermissionsAsync = _asyncToGenerator(function* () {\n    console.warn('ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()');\n    return getMediaLibraryPermissionsAsync();\n  });\n  return _getCameraRollPermissionsAsync.apply(this, arguments);\n}\nexport function getMediaLibraryPermissionsAsync() {\n  return _getMediaLibraryPermissionsAsync.apply(this, arguments);\n}\nfunction _getMediaLibraryPermissionsAsync() {\n  _getMediaLibraryPermissionsAsync = _asyncToGenerator(function* () {\n    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n  });\n  return _getMediaLibraryPermissionsAsync.apply(this, arguments);\n}\nexport function requestCameraPermissionsAsync() {\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _requestCameraPermissionsAsync() {\n  _requestCameraPermissionsAsync = _asyncToGenerator(function* () {\n    return ExponentImagePicker.requestCameraPermissionsAsync();\n  });\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nexport function requestCameraRollPermissionsAsync() {\n  return _requestCameraRollPermissionsAsync.apply(this, arguments);\n}\nfunction _requestCameraRollPermissionsAsync() {\n  _requestCameraRollPermissionsAsync = _asyncToGenerator(function* () {\n    console.warn('ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()');\n    return requestMediaLibraryPermissionsAsync();\n  });\n  return _requestCameraRollPermissionsAsync.apply(this, arguments);\n}\nexport function requestMediaLibraryPermissionsAsync() {\n  return _requestMediaLibraryPermissionsAsync.apply(this, arguments);\n}\nfunction _requestMediaLibraryPermissionsAsync() {\n  _requestMediaLibraryPermissionsAsync = _asyncToGenerator(function* () {\n    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n    return imagePickerMethod(writeOnly);\n  });\n  return _requestMediaLibraryPermissionsAsync.apply(this, arguments);\n}\nexport var useMediaLibraryPermissions = createPermissionHook({\n  getMethod: function getMethod(options) {\n    return getMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  },\n  requestMethod: function requestMethod(options) {\n    return requestMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  }\n});\nexport var useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync\n});\nexport function getPendingResultAsync() {\n  return _getPendingResultAsync.apply(this, arguments);\n}\nfunction _getPendingResultAsync() {\n  _getPendingResultAsync = _asyncToGenerator(function* () {\n    if (ExponentImagePicker.getPendingResultAsync) {\n      return ExponentImagePicker.getPendingResultAsync();\n    }\n    return [];\n  });\n  return _getPendingResultAsync.apply(this, arguments);\n}\nexport function launchCameraAsync() {\n  return _launchCameraAsync.apply(this, arguments);\n}\nfunction _launchCameraAsync() {\n  _launchCameraAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExponentImagePicker.launchCameraAsync) {\n      throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n    }\n    return yield ExponentImagePicker.launchCameraAsync(validateOptions(options));\n  });\n  return _launchCameraAsync.apply(this, arguments);\n}\nexport function launchImageLibraryAsync(_x) {\n  return _launchImageLibraryAsync.apply(this, arguments);\n}\nfunction _launchImageLibraryAsync() {\n  _launchImageLibraryAsync = _asyncToGenerator(function* (options) {\n    if (!ExponentImagePicker.launchImageLibraryAsync) {\n      throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n    }\n    if (options != null && options.allowsEditing && options.allowsMultipleSelection) {\n      console.warn('[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' + \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" + 'to fix this warning.');\n    }\n    return yield ExponentImagePicker.launchImageLibraryAsync(options != null ? options : {});\n  });\n  return _launchImageLibraryAsync.apply(this, arguments);\n}\nexport { MediaTypeOptions, VideoExportPreset, PermissionStatus, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle };","map":{"version":3,"mappings":"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","names":["PermissionStatus","createPermissionHook","UnavailabilityError","CodedError","ExponentImagePicker","MediaTypeOptions","VideoExportPreset","UIImagePickerControllerQualityType","UIImagePickerPresentationStyle","validateOptions","options","aspect","quality","videoMaxDuration","x","y","getCameraPermissionsAsync","getCameraRollPermissionsAsync","console","warn","getMediaLibraryPermissionsAsync","writeOnly","requestCameraPermissionsAsync","requestCameraRollPermissionsAsync","requestMediaLibraryPermissionsAsync","imagePickerMethod","useMediaLibraryPermissions","getMethod","requestMethod","useCameraPermissions","getPendingResultAsync","launchCameraAsync","launchImageLibraryAsync","allowsEditing","allowsMultipleSelection"],"sourceRoot":"","sources":["../src/ImagePicker.ts"],"sourcesContent":["import {\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  createPermissionHook,\n  UnavailabilityError,\n  CodedError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  MediaTypeOptions,\n  ImagePickerOptions,\n  VideoExportPreset,\n  ExpandImagePickerResult,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n} from './ImagePicker.types';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.\n */\nexport async function getCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()'\n  );\n  return getMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.\n */\nexport async function requestCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()'\n  );\n  return requestMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an array of objects of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, to the array of [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** an empty array.\n */\nexport async function getPendingResultAsync(): Promise<\n  (ImagePickerResult | ImagePickerErrorResult)[]\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return [];\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(options));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG, on iOS — GIF).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchImageLibraryAsync<T extends ImagePickerOptions>(\n  options?: T\n): Promise<ExpandImagePickerResult<T>> {\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (options?.allowsEditing && options.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});\n}\n\nexport {\n  MediaTypeOptions,\n  ImagePickerOptions,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  VideoExportPreset,\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  ExpandImagePickerResult,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n};\n"]},"metadata":{},"sourceType":"module"}