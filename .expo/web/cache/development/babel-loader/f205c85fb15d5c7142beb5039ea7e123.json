{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\n\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n\n  var _React$useState = React.useState(function () {\n      return selector(navigation.getState());\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}","map":{"version":3,"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,aAAP;;AAWA,eAAe,SAASC,kBAAT,CACbC,QADa,EAEV;EACH,IAAMC,UAAU,GAAGH,aAAa,EAAhC;;EAIA,sBAAsBD,KAAK,CAACK,QAAN,CAAe;MAAA,OAAMF,QAAQ,CAACC,UAAU,CAACE,QAAX,EAAD,CAA7B;IAAA,EAAtB;IAAA;IAASC,SAAH;;EAGN,IAAMC,WAAW,GAAGR,KAAK,CAACS,MAAN,CAAaN,QAAb,CAApB;EAEAH,KAAK,CAACU,SAAN,CAAgB,YAAM;IACpBF,WAAW,CAACG,OAAZ,GAAsBR,QAAtB;EACD,CAFD;EAIAH,KAAK,CAACU,SAAN,CAAgB,YAAM;IACpB,IAAME,WAAW,GAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,EAAiCC,WAAD,EAAO;MACzDP,SAAS,CAACC,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT;IACD,CAFmB,CAApB;IAIA,OAAOJ,WAAP;EACD,CAND,EAMG,CAACR,UAAD,CANH;EAQA,OAAOD,QAAQ,CAACC,UAAU,CAACE,QAAX,EAAD,CAAf;AACD","names":["React","useNavigation","useNavigationState","selector","navigation","useState","getState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}