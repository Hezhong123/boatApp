{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { CodedError } from 'expo-modules-core';\nexport var ClipboardUnavailableException = function (_CodedError) {\n  _inherits(ClipboardUnavailableException, _CodedError);\n  var _super = _createSuper(ClipboardUnavailableException);\n  function ClipboardUnavailableException() {\n    _classCallCheck(this, ClipboardUnavailableException);\n    return _super.call(this, 'ERR_CLIPBOARD_UNAVAILABLE', \"The 'AsyncClipboard' API is not available on this browser\");\n  }\n  return _createClass(ClipboardUnavailableException);\n}(CodedError);\nexport var CopyFailureException = function (_CodedError2) {\n  _inherits(CopyFailureException, _CodedError2);\n  var _super2 = _createSuper(CopyFailureException);\n  function CopyFailureException(cause) {\n    _classCallCheck(this, CopyFailureException);\n    return _super2.call(this, 'ERR_COPY_FAILURE', \"Failed to copy to clipboard: \" + cause);\n  }\n  return _createClass(CopyFailureException);\n}(CodedError);\nexport var PasteFailureException = function (_CodedError3) {\n  _inherits(PasteFailureException, _CodedError3);\n  var _super3 = _createSuper(PasteFailureException);\n  function PasteFailureException(cause) {\n    _classCallCheck(this, PasteFailureException);\n    return _super3.call(this, 'ERR_COPY_FAILURE', \"Failed to paste from clipboard: \" + cause);\n  }\n  return _createClass(PasteFailureException);\n}(CodedError);\nexport var NoPermissionException = function (_CodedError4) {\n  _inherits(NoPermissionException, _CodedError4);\n  var _super4 = _createSuper(NoPermissionException);\n  function NoPermissionException() {\n    _classCallCheck(this, NoPermissionException);\n    return _super4.call(this, 'ERR_NO_PERMISSION', 'User denied permission to access clipboard');\n  }\n  return _createClass(NoPermissionException);\n}(CodedError);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAE9C,WAAaC,6BAA8B;EAAA;EAAA;EACzC;IAAA;IAAA,yBACQ,2BAA2B,EAAE,2DAA2D;EAChG;EAAC;AAAA,EAHgDD,UAAU;AAM7D,WAAaE,oBAAqB;EAAA;EAAA;EAChC,8BAAYC,KAAa;IAAA;IAAA,0BACjB,kBAAkB,oCAAkCA,KAAK;EACjE;EAAC;AAAA,EAHuCH,UAAU;AAMpD,WAAaI,qBAAsB;EAAA;EAAA;EACjC,+BAAYD,KAAa;IAAA;IAAA,0BACjB,kBAAkB,uCAAqCA,KAAK;EACpE;EAAC;AAAA,EAHwCH,UAAU;AAMrD,WAAaK,qBAAsB;EAAA;EAAA;EACjC;IAAA;IAAA,0BACQ,mBAAmB,EAAE,4CAA4C;EACzE;EAAC;AAAA,EAHwCL,UAAU","names":["CodedError","ClipboardUnavailableException","CopyFailureException","cause","PasteFailureException","NoPermissionException"],"sourceRoot":"","sources":["../../src/web/Exceptions.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nexport class ClipboardUnavailableException extends CodedError {\n  constructor() {\n    super('ERR_CLIPBOARD_UNAVAILABLE', \"The 'AsyncClipboard' API is not available on this browser\");\n  }\n}\n\nexport class CopyFailureException extends CodedError {\n  constructor(cause: string) {\n    super('ERR_COPY_FAILURE', `Failed to copy to clipboard: ${cause}`);\n  }\n}\n\nexport class PasteFailureException extends CodedError {\n  constructor(cause: string) {\n    super('ERR_COPY_FAILURE', `Failed to paste from clipboard: ${cause}`);\n  }\n}\n\nexport class NoPermissionException extends CodedError {\n  constructor() {\n    super('ERR_NO_PERMISSION', 'User denied permission to access clipboard');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}