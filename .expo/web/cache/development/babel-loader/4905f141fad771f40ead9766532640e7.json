{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from \"./NotificationPermissionsModule\";\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (!NotificationPermissionsModule.getPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n    }\n    return yield NotificationPermissionsModule.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\nexport function requestPermissionsAsync(_x) {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* (permissions) {\n    if (!NotificationPermissionsModule.requestPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n    }\n    var requestedPermissions = permissions != null ? permissions : {\n      ios: {\n        allowAlert: true,\n        allowBadge: true,\n        allowSound: true\n      }\n    };\n    var requestedPlatformPermissions = requestedPermissions[Platform.OS];\n    return yield NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport var usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"mappings":";AAAA,SAASA,oBAAoB,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,mBAAmB;AAMvF,OAAOC,6BAA6B;AAEpC,gBAAsBC,mBAAmB;EAAA;AAAA;AAMxC;EAAA,yCANM,aAAkC;IACvC,IAAI,CAACD,6BAA6B,CAACC,mBAAmB,EAAE;MACtD,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;;IAGvE,aAAaC,6BAA6B,CAACC,mBAAmB,EAAE;EAClE,CAAC;EAAA;AAAA;AAED,gBAAsBC,uBAAuB;EAAA;AAAA;AAc5C;EAAA,6CAdM,WAAuCC,WAA4C;IACxF,IAAI,CAACH,6BAA6B,CAACE,uBAAuB,EAAE;MAC1D,MAAM,IAAIH,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC;;IAG3E,IAAMK,oBAAoB,GAAGD,WAAW,WAAXA,WAAW,GAAI;MAC1CE,GAAG,EAAE;QACHC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE;;KAEf;IACD,IAAMC,4BAA4B,GAAGL,oBAAoB,CAACN,QAAQ,CAACY,EAAE,CAAC;IACtE,aAAaV,6BAA6B,CAACE,uBAAuB,CAACO,4BAA4B,CAAC;EAClG,CAAC;EAAA;AAAA;AAYD,OAAO,IAAME,cAAc,GAAGd,oBAAoB,CAGhD;EACAe,aAAa,EAAEV,uBAAuB;EACtCW,SAAS,EAAEZ;CACZ,CAAC","names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sourceRoot":"","sources":["../src/NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Notifications.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"]},"metadata":{},"sourceType":"module"}