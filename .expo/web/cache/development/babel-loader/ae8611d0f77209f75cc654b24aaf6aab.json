{"ast":null,"code":"import { CHILD_STATE } from \"./useRouteCache\";\nexport default function getFocusedRouteNameFromRoute(route) {\n  var _route$CHILD_STATE, _state$index;\n\n  var state = (_route$CHILD_STATE = route[CHILD_STATE]) !== null && _route$CHILD_STATE !== void 0 ? _route$CHILD_STATE : route.state;\n  var params = route.params;\n  var routeName = state ?\n  state.routes[\n  (_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name :\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"mappings":"AAEA,SAASA,WAAT;AAEA,eAAe,SAASC,4BAAT,CACbC,KADa,EAEO;EAAA;;EAEpB,IAAMC,KAAK,yBAAGD,KAAK,CAACF,WAAD,CAAR,mEAAyBE,KAAK,CAACC,KAA1C;EACA,IAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;EAEA,IAAMC,SAAS,GAAGF,KAAK;EAEnBA,KAAK,CAACG,MAAN;EAAA,gBAGEH,KAAK,CAACI,KAHR,uDAIK,OAAOJ,KAAK,CAACK,IAAb,KAAsB,QAAtB,IAAkCL,KAAK,CAACK,IAAN,KAAe,OAAjD,GACG,CADH,GAEGL,KAAK,CAACG,MAAN,CAAaG,MAAb,GAAsB,CAN9B,EAOEC,IATiB;EAWrB,QAAON,MAAP,aAAOA,MAAP,uBAAOA,MAAM,CAAEO,MAAf,MAA0B,QAA1B,GACEP,MAAM,CAACO,MADT,GAEEC,SAbJ;EAeA,OAAOP,SAAP;AACD","names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","state","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["getFocusedRouteNameFromRoute.tsx"],"sourcesContent":["import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"]},"metadata":{},"sourceType":"module"}