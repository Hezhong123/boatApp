{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    _classCallCheck(this, LogBoxLog);\n    this.symbolicated = {\n      error: null,\n      stack: null,\n      status: 'NONE'\n    };\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n  _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack() {\n      return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(callback) {\n      if (this.symbolicated.status !== 'COMPLETE') {\n        LogBoxSymbolication.deleteStack(this.stack);\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(callback) {\n      if (this.symbolicated.status === 'NONE') {\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(callback) {\n      var _this = this;\n      if (this.symbolicated.status !== 'PENDING') {\n        this.updateStatus(null, null, null, callback);\n        LogBoxSymbolication.symbolicate(this.stack).then(function (data) {\n          _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);\n        }, function (error) {\n          _this.updateStatus(error, null, null, callback);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(error, stack, codeFrame, callback) {\n      var lastStatus = this.symbolicated.status;\n      if (error != null) {\n        this.symbolicated = {\n          error: error,\n          stack: null,\n          status: 'FAILED'\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n        this.symbolicated = {\n          error: null,\n          stack: stack,\n          status: 'COMPLETE'\n        };\n      } else {\n        this.symbolicated = {\n          error: null,\n          stack: null,\n          status: 'PENDING'\n        };\n      }\n      if (callback && lastStatus !== this.symbolicated.status) {\n        callback(this.symbolicated.status);\n      }\n    }\n  }]);\n  return LogBoxLog;\n}();\nexport default LogBoxLog;","map":{"version":3,"names":["LogBoxSymbolication","LogBoxLog","data","symbolicated","error","stack","status","level","type","message","category","componentStack","codeFrame","isComponentError","count","callback","deleteStack","handleSymbolicate","updateStatus","symbolicate","then","lastStatus"],"sources":["/Users/hez/code/boatApp/node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from './parseLogBoxLog';\nimport type {Stack} from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  type?: ?string,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  type: ?string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}