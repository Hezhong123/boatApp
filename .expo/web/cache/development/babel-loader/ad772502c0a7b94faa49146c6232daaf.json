{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"to\", \"action\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport useLinkProps from \"./useLinkProps\";\n\nexport default function Link(_ref) {\n  var to = _ref.to,\n    action = _ref.action,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var props = useLinkProps({\n    to: to,\n    action: action\n  });\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n    props.onPress(e);\n  };\n  return React.createElement(Text, _objectSpread(_objectSpread(_objectSpread({}, props), rest), Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })));\n}","map":{"version":3,"mappings":";;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAGA,OAAOC,YAAP;;AAoBA,eAAe,SAASC,IAAT,OAIM;EAAA,IAHnBC,EAD4E,GAIzDC,KAHnBD,EAD4E;IAE5EE,MAF4E,GAIzDD,KAFnBC,MAF4E;IAGzEC,gCACgBF;EACnB,IAAMG,KAAK,GAAGN,YAAY,CAAY;IAAEE,EAAF,EAAEA,EAAF;IAAME;EAAN,CAAZ,CAA1B;EAEA,IAAMG,OAAO,GACXC,SADID,OAAO,CACXC,CADc,EAEX;IACH,IAAI,aAAaH,IAAjB,EAAuB;MAAA;MACrB,qBAAI,CAACE,OAAL,yEAAI,EAAWC,CAAX,CAAJ;IACD;IAEDF,KAAK,CAACC,OAAN,CAAcC,CAAd;EACD,CARD;EAUA,OAAOT,KAAK,CAACU,aAAN,CAAoBC,IAApB,gDACFJ,KAD4B,GAE5BD,IAF4B,GAG5BM,QAAQ,CAACC,MAAT,CAAgB;IACjBC,GAAG,EAAE;MAAEC,OAAO,EAAEP;IAAX,CADY;IAEjBQ,OAAO,EAAE;MAAER;IAAF;EAFQ,CAAhB,GAHL;AAQD","names":["React","useLinkProps","Link","to","_ref","action","rest","props","onPress","e","createElement","Text","Platform","select","web","onClick","default"],"sources":["Link.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}