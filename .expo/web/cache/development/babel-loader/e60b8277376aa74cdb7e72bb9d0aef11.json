{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\n\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n    getState = _ref.getState,\n    navigation = _ref.navigation,\n    _setOptions = _ref.setOptions,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    stackRef = _React$useContext.stackRef;\n\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  },\n  [getState, navigation, _setOptions, router, emitter]);\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n        rest = _objectWithoutProperties(navigation, _excluded);\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n        if (action != null) {\n          navigation.dispatch(_objectSpread({\n            source: route.key\n          }, action));\n        }\n      };\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return withStack(function () {\n            return (\n              _dispatch(actions[name].apply(actions, args))\n            );\n          });\n        };\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        getParent: function getParent(id) {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n          return rest.getParent(id);\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","_ref","getState","navigation","setOptions","router","emitter","useContext","stackRef","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","args","create","getParent","id","getId","options","o","isFocused","index"],"sources":["useNavigationCache.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}